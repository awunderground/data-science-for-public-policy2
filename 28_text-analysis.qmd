---
title: "Text Analysis"
format: 
  html:
    toc: true
    code-line-numbers: true
    
execute:
    warning: false
    message: false
editor: source
---

```{r echo = FALSE}

knitr::opts_chunk$set(size = "small")
library(tidyverse)
library(tidytext)

```

## Motivation

Before providing motivation, let's define two key terms. 

::: {.callout-tip}
## Text Corpus
**Text Corpus:** A set of text. A corpus generally has theme such as "The Federalist Papers" or Jane Austin novels.  
:::

::: {.callout-tip}
## Text Analysis:
**Text analysis:** The process of deriving information from text using algorithms and statistical analysis. 
:::


Text analysis has broad applications that extend well beyond policy analysis. We will briefly focus on four applications that are related to policy analysis. 

### Document Summarization

::: {.callout-tip}
## Document Summarization:
The process of condensing the amount of information in a document into a useful subset of information. Techniques range from counting words to using complex machine learning algorithms. 
:::

**Example:** Frederick Mosteller and David Wallace used Bayesian statistics and the frequency of certain words to identify the authorship of the twelve unclaimed Federalist papers. Before estimating any models, they spent months cutting out each word of the Federalist Papers and the counting the frequency of words [@christopher2016]. 

### Text Classification (supervised)

::: {.callout-tip}
## Text Classification
The process of labeling documents with a predetermined set of labels.
:::

**Example:** Researchers in the Justice Policy Center at the Urban Institute classified millions of tweets with the word "cop" or "police" as "positive", "negative", "neutral", or "not applicable" for sentiment and "crime or incident information", "department or event information", "traffic or weather updates", "person identification", or "other" for topic. The researchers created content and metadata features, manually labeled a few thousand tweets for training data, and used gradient boosting for supervised machine learning for the task [@oglesby2019].

**Example:** Frederick Mosteller and David Wallace used Bayesian statistics and the frequency of certain words to identify the authorship of the twelve unclaimed Federalist papers [@christopher2016].

### Document Grouping (unsupervised)

::: {.callout-tip}
## Document Grouping
The algorithmic grouping or clustering of documents using features extracted from the documents. This includes unsupervised classification of documents into meaningful groups. Techniques like topic modeling result in lists of important words that can be used to summarize and label the documents while techniques like K-means clustering result in arbitrary cluster labels. 
:::

**Example:** Pew Research used *unsupervised* and *semi-supervised* methods to create topic models of open-ended text responses about where Americans find meaning in their lives [@vanKessel2019].

### 4. Text Extraction

::: {.callout-tip}
## Text Extraction
Text often contains important unstructured information that would be useful to have in a structured format like a table. Text extraction is the process of searching and identifying key entities or concepts from unstructured text and then placing them in a structured format.
:::


**Example:** Researchers from Cornell counted sources of misinformation from 38 million articles [@nyt2021; @covidmisinfo]. 

### Other

Speech recognition, machine translation, question answering, and text autocompletion are other forms of text analysis and language processing that are common but not implemented with R packages. 

## Tools

### Frequency

::: {.callout-tip}
## Term Frequency:
**Term Frequency:** A count or relative frequency of the most common words in a document or documents.
:::

::: {.callout-tip}
## TFIDF:
**Term Frequency-Inverse Document Frequency (TF-IDF):** Some words are naturally more common than other words. TF-IDF quantifies the importance of words/terms in one document relative to other documents in a corpus. 
:::

![**Source:** [Chris Albon](https://machinelearningflashcards.com/)](images/TF-IDF.pdf){fig-align="center" width=80% height=400px}

::: {.callout-tip}
## Word cloud: 
**Word cloud:** A method of visualizing word frequency where the frequency of a given word is encoded as the size of the word. Word clouds are overused and are tough to interpret. [This 2016 election word cloud](https://news.gallup.com/poll/195596/email-dominates-americans-heard-clinton.aspx) by Gallup is an exceptional word cloud. 
:::


### Collocation

::: {.callout-tip}
## N-gram:
**N-gram:** A consecutive sequence of *n* words. Unigrams are words, bigrams are pairs of words, and trigrams are groups of three words. 
:::

::: {.callout-tip}
## N-gram frequency:
**N-gram frequency:** A count or relative frequency of n-grams in a document or documents.
:::

::: {.callout-tip}
## TF-IDF of N-grams
**TF-IDF of N-grams:** TF-IDF with n-grams instead of words. 
:::


::: {.callout-tip}
## Bigram graph:
**Bigram graph:** A directed or undirected graph with individual words as nodes and bigrams as edges. You can see an example from *Text Mining with R: A Tidy Approach* [@Silge2017] [here](https://www.tidytextmining.com/ngrams.html).
:::

## Topic Modeling

::: {.callout-tip}
## Topic modeling:
**Topic modeling:** Unsupervised and semi-supervised methods for grouping documents. See @vanKessel2019 for an example. 

Popular methods include:

* Latent Dirichlet Allocation (LDA)
* Non-Negative Matrix Factorization
* CorEx (Correlation Explanation)
:::

## Natural Language Processing

::: {.callout-tip}
## Natural Language Processing:
**Natural language processing:** The algorithmic analysis of text in a way that is rooted in linguistics. [Stanford CoreNLP](https://stanfordnlp.github.io/CoreNLP/) is an important tool for natural language processing. 
:::

::: {.callout-tip}
## Sentiment Analysis:
**Sentiment analysis:** The process of labeling words or sentences as positive, neutral, or negative. 
:::

::: {.callout-tip}
## Named entity recognition:
**Named entity recognition:** The process of identifying names, places, organizations, and more in text. 
:::

::: {.callout-tip}
## Parts of speech tagging:
**Parts of speech tagging:** The process of identifying the part of speech of each word (noun, verb, etc.). 
:::

::: {.callout-tip}
## Lemmatization:
**Lemmatization:** The process of shortening words to a base grammar. 
:::

### Key Challenge

`R` and `Python` have powerful tools for text analysis. 

**Key challenge:** text contains a lot of useful information, but its structure does not match how we have done data analysis up to this point.

## Vocabulary & Tidy Data

```{r message = FALSE}
library(gutenbergr)

fed_papers <- gutenberg_download(gutenberg_id = 1404)

fed_papers

fed_paper1 <- fed_papers %>%
  filter(row_number() >= 8 & row_number() <= 165)

```

::: {.callout-tip}
## Token:
**Token:** A meaningful unit of text. 
:::

::: {.callout-tip}
## Tokenization:
**Tokenization:** Process of splitting a larger unit of text into tokens.
:::

![**Source:** [Chris Albon](https://machinelearningflashcards.com/)](images/Tokenizing_Text.pdf){fig-align="center" width=80% height=400px}


```{r}
# tidytext can tokenize text with unnest_tokens()
tidy_fed_paper1 <- fed_paper1 %>%
  unnest_tokens(output = word, input = text)

tidy_fed_paper1

```

::: {.callout-tip}
**Stemming:** A method of removing the end, and keeping only the root, of a word. Stemming is unaware of the context or use of the word. This [example](https://smltar.com/stemming.html#how-to-stem-text-in-r) [@Silge2017] provides a good in-depth discussion of the process. 

```{r}
# SnowballC has a stemmer that works well with tidytext
library(SnowballC)

tidy_fed_paper1 %>%
  mutate(stem = wordStem(word)) %>%
  filter(word != stem)

```
:::

::: {.callout-tip}
## Lemmatizing: 
**Lemmatizing:** A method of returning the base of a word. Lemmatization considers the context of a word. This [example](https://smltar.com/stemming.html#lemmatization) [@Silge2017] provides more depth on lemmatizing. Lemmatizing requires natural language processing, so this requires Stanford CoreNLP or the Python package spaCy. 
:::

::: {.callout-tip}
## Stop words: 
**Stop words:** Extremely common words that are often not useful for text analysis. `library(tidytext)` contains stop words from the `onix`, `SMART`, and `snowball` lexicons.

```{r}
stop_words

```
:::

::: {.callout-tip}
## Tidy text
**Tidy text:** "A table with one token per row." [@Silge2017]

Text can also be stored as a string, a corpus, and a document-term matrix. 

```{r}
# tidy text format
tidy_fed_paper1

```
:::

## Example 1

```{r}
# load necessary packages
library(tidyverse)
library(tidytext)
library(gutenbergr)
library(SnowballC)

# download the Federalist Papers from Project Gutenberg
fed_papers <- gutenberg_download(gutenberg_id = 1404)

# this data cleaning comes from Emil Hvitfeldt
# https://www.hvitfeldt.me/blog/predicting-authorship-in-the-federalist-papers-with-tidytext/
hamilton <- c(1, 6:9, 11:13, 15:17, 21:36, 59:61, 65:85)
madison <- c(10, 14, 18:20, 37:48)
jay <- c(2:5, 64)
unknown <- c(49:58, 62:63)

fed_papers <- pull(fed_papers, text) %>%
  str_c(collapse = " ") %>%
  str_split(pattern = "\\.|\\?|\\!") %>%
  unlist() %>%
  tibble(text = .) %>%
  mutate(sentence = row_number())

tidy_fed_papers <- fed_papers %>%
  mutate(paper_number = cumsum(str_detect(text, regex("FEDERALIST No",
                                                      ignore_case = TRUE)))) %>%
  unnest_tokens(word, text) %>%
  mutate(author = case_when(
    paper_number %in% hamilton ~ "hamilton",
    paper_number %in% madison ~ "madison",
    paper_number %in% jay ~ "jay",
    paper_number %in% unknown ~ "unknown"
  ))

```

### Approach 1

Here we'll calculate term frequency without stop words and with stemming. 

```{r}
# filter to main authors
tidy_fed_papers1 <- tidy_fed_papers %>%
  filter(author %in% c("hamilton", "madison"))

# remove stop words and stem the words
tidy_fed_papers1 <- tidy_fed_papers1 %>%
  anti_join(stop_words, by = "word") %>%
  mutate(word = wordStem(word))

# count Hamilton's most-frequent words
tidy_fed_papers1 %>%
  filter(author == "hamilton") %>%
  count(word, sort = TRUE)

# count Madison's most-frequent words
tidy_fed_papers1 %>%
  filter(author == "madison") %>%
  count(word, sort = TRUE)

```

### Approach 2

Here we'll perform TF-IDF.

```{r}
# calculate tf-idf
tf_idf <- tidy_fed_papers %>%
  count(author, word, sort = TRUE) %>%
  bind_tf_idf(term = word, document = author, n = n) 

# plot
tf_idf %>%
  filter(author %in% c("hamilton", "madison")) %>%
  group_by(author) %>%
  top_n(15, tf_idf) %>%
  mutate(word = reorder(word, tf_idf)) %>%
  ggplot(aes(tf_idf, word, fill = author)) +
  geom_col() +
  facet_wrap(~author, scales = "free") +
  theme_minimal() +
  guides(fill = "none")

```

### Approach 3

```{r}
tidy_fed_papers %>%
  count(author, word, sort = TRUE) %>%
  filter(word == "upon")

```

## Example 2

Let's consider ten of Shakespeare's plays.

```{r fig.height = 8}
ids <- c(
  2265, # Hamlet 
  1795, # Macbeth 
  1522, # Julius Caesar 
  2235, # The Tempest 
  1780, # Henry IV, Part 1 
  1532, # King Lear
  1513, # Romeo and Juliet 
  1110, # King John
  1519, # Much Ado About Nothing
  1539  # The Winter's Tale
)

# download corpus
shakespeare <- gutenberg_download(
  gutenberg_id = ids,
  meta_fields = "title"
)

# create tokens and drop character cues
shakespeare_clean <- shakespeare %>%
  unnest_tokens(word, text, to_lower = FALSE) %>%
  filter(word != str_to_upper(word)) 

# calculate TF-IDF
shakespeare_tf_idf <- shakespeare_clean %>%
  count(title, word, sort = TRUE) %>%
  bind_tf_idf(term = word, document = title, n = n)

# plot
shakespeare_tf_idf %>%
  group_by(title) %>%
  top_n(8, tf_idf) %>%
  mutate(word = reorder(word, tf_idf)) %>%
  ggplot(aes(tf_idf, word, fill = title)) +
  geom_col() +
  facet_wrap(~title, scales = "free", ncol = 2) +
  theme_minimal() +
  guides(fill = "none")

```

## Resources

* [Corporate Reporting in the Era of Artificial Intelligence](https://www.nber.org/digest-202012/corporate-reporting-era-artificial-intelligence)
* [Text Mining with R](https://www.tidytextmining.com/) by Julia Silge and David Robinson
* [Supervised Machine Learning for Text Analysis in R](https://smltar.com/) by Emil Hvitfledt and Julia Silge
* [Corpus](http://corpustext.com/index.html)
