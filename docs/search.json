[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science for Public Policy Part II",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "03_functions.html#sec-review3",
    "href": "03_functions.html#sec-review3",
    "title": "1  Advanced R Programming",
    "section": "1.1 Review",
    "text": "1.1 Review\n\n1.1.1 Relational Data\nWe’ve almost exclusively used data frames up to this point. We leveraged relations within our data to pick subsets of the data with functions like filter().\n\nlibrary(tidyverse)\n\nmsleep |&gt; \n  filter(name == \"Cow\")\n\n# A tibble: 1 × 11\n  name  genus vore  order   conservation sleep_total sleep_rem sleep_cycle awake\n  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1 Cow   Bos   herbi Artiod… domesticated           4       0.7       0.667    20\n# ℹ 2 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt;\n\n\nImportantly, we almost never used indices or selected data by position, which can lead to errors if the underlying data change. For example, pick row number 5 and column number 4. This idea of using the relations in data reduces the chances of making mistakes and leads to clearer code."
  },
  {
    "objectID": "03_functions.html#programming",
    "href": "03_functions.html#programming",
    "title": "1  Advanced R Programming",
    "section": "1.2 Programming",
    "text": "1.2 Programming\n\n1.2.1 Selecting Data\nThere are other ways to subset data, which are important when working with objects other than data frames. We will focus on [], [[]], and $.\n\nAtomic Vectors\nMuch of our work focuses on four of the six types of atomic vectors: logical, integer, double, and character. [] is useful for subsetting atomic vectors. Consider a vector with the first six letters of the alphabet:\n\nletters_short &lt;- letters[1:6]\n\nWe can use positive integers to subset to the first and fifth letters of the alphabet.\n\nletters_short[c(1, 5)]\n\n[1] \"a\" \"e\"\n\n\nWe can use negative integers to subset to the everything but the first and fifth letters of the alphabet.\n\nletters_short[c(-1, -5)]\n\n[1] \"b\" \"c\" \"d\" \"f\"\n\n\nWe can use Booleans (trues and falses) to subset to the first and fifth letters of the alphabet.\n\nletters_short[c(TRUE, FALSE, FALSE, FALSE, TRUE, FALSE)]\n\n[1] \"a\" \"e\"\n\n\nThis may seem silly, but we have many ways to create Booleans that we can then use to subset a vector.\n\nbooleans &lt;- letters_short %in% c(\"a\", \"e\")\n\nbooleans\n\n[1]  TRUE FALSE FALSE FALSE  TRUE FALSE\n\nletters_short[booleans]\n\n[1] \"a\" \"e\"\n\n\nWe can use a character vector to subset a named vector.\n\nnamed_vector &lt;- c(a = 1, b = 2, c = 3)\n\nnamed_vector\n\na b c \n1 2 3 \n\nnamed_vector[c(\"a\", \"c\")]\n\na c \n1 3 \n\n\nWe are able to select more than one element with [], which will not be true of [[]] and $. One thing to look out for is vector recycling. Let’s go back to letters_short, which is length six, but consider some indices of varying lengths.\n\nletters_short[TRUE]\n\n[1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"\n\nletters_short[c(TRUE, FALSE)]\n\n[1] \"a\" \"c\" \"e\"\n\nletters_short[c(TRUE, FALSE, TRUE)]\n\n[1] \"a\" \"c\" \"d\" \"f\"\n\n\n\n\n\n\n\n\nCaution\n\n\n\nWow, R recycles the Booleans. Six is divisible by 1, 2, and 3, so there are many ways to recycle the index to subset letters_short. This is dangerous and can quietly cause analtyic errors.\n\n\n\n\n\n\n\n\nExercise 1\n\n\n\n\nCreate letters_short.\nTry subsetting the vectors with indices with length four or five. What happens?\n\n\n\n\n\nLists\n[[]] and $ are useful for subetting lists. Both can be used to subset data frames, but I recommending avoiding this.\nUnlike [], which returns multiple elements, [[]] and $ can only return a single element and [[]] and $ simplify objects by removing a later of hierarchy.\n[[]] can select an element by position or name, while $ can only select an element by name. Consider a list with the first six letters of the alphabet.\n\nalphabet &lt;- list(\n  vowels = c(\"a\", \"e\"),\n  consonants = c(\"b\", \"c\", \"d\", \"f\")\n)\n\nWe can use [] to select the first or second element. In both cases, we get back a smaller list.\n\nalphabet[1]\n\n$vowels\n[1] \"a\" \"e\"\n\nclass(alphabet[1])\n\n[1] \"list\"\n\nalphabet[2]\n\n$consonants\n[1] \"b\" \"c\" \"d\" \"f\"\n\nclass(alphabet[2])\n\n[1] \"list\"\n\n\nWe can use [[]] to select the first or second element. Now, we get back a vector instead of a list. [[]] simplified the object by removing a level of hierarchy.\n\nalphabet[[1]]\n\n[1] \"a\" \"e\"\n\nclass(alphabet[[1]])\n\n[1] \"character\"\n\n\nWe can also use [[]] to select an object by name.\n\nalphabet[[\"vowels\"]]\n\n[1] \"a\" \"e\"\n\nclass(alphabet[[\"vowels\"]])\n\n[1] \"character\"\n\n\nWe can use $ to select either vector by name.\n\nalphabet$vowels\n\n[1] \"a\" \"e\"\n\nclass(alphabet$vowels)\n\n[1] \"character\"\n\n\nReferring to objects by name should make for code that is more robust to changing data.\n\nBeforeAfter\n\n\n\nalphabet1 &lt;- list(\n  vowels = c(\"a\", \"e\"),\n  consonants = c(\"b\", \"c\", \"d\", \"f\")\n)\n\nalphabet1[[2]]\n\n[1] \"b\" \"c\" \"d\" \"f\"\n\nalphabet1[[\"consonants\"]]\n\n[1] \"b\" \"c\" \"d\" \"f\"\n\n\n\n\n\nalphabet2 &lt;- list(\n  vowels = c(\"a\", \"e\"),\n  confusing = \"y\",\n  consonants = c(\"b\", \"c\", \"d\", \"f\")\n)\n\nalphabet2[[2]]\n\n[1] \"y\"\n\nalphabet2[[\"consonants\"]]\n\n[1] \"b\" \"c\" \"d\" \"f\"\n\n\n\n\n\nSubsetting lists can be difficult. Fortunately, RStudio has a tool than can help. Click on a list in your global environment. Navigate to the far right and click the list button with a green arrow. This will generate code and add it to the Console.\n\nInterestingly, this tool avoids $ and uses [[]] to pick the vector by name.\n\nalphabet[[\"vowels\"]]\n\n[1] \"a\" \"e\"\n\n\n\n\n\n1.2.2 Control Flow\n\nFor Loops\nLoops are a fundamental programming tool for iteration; however, they are less common in R than in other programming languages. We previously focused on the Map-Reduce framework and library(purrr) instead of for loops for iteration.\nFor loops have two main pieces: 1. a header and 2. a body. Headers define the number of iterations and potential inputs to the iteration. Bodies are iterated once per iteration. Here is a very simple example:\n\nfor (i in 1:10) {\n  \n  print(i)\n  \n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n\n\nWe can use headers several different ways. Like above, we may just want to repeat the values in the index.\n\nfruit &lt;- c(\"apple\", \"banana\", \"cantelope\")\nfor (b in fruit) {\n  \n  print(b)\n  \n}\n\n[1] \"apple\"\n[1] \"banana\"\n[1] \"cantelope\"\n\n\nWe can use the header as an index.\n\nfruit &lt;- c(\"apple\", \"banana\", \"cantelope\")\nfor (i in 1:3) {\n  \n  print(fruit[i])\n  \n}\n\n[1] \"apple\"\n[1] \"banana\"\n[1] \"cantelope\"\n\n\nWe can leverage the index to use results from previous iterations.\n\nresult &lt;- c(1, NA, NA, NA) \nfor (i in 2:4) {\n  \n  result[i] &lt;- result[i - 1] * 2\n  \n}\n\nresult\n\n[1] 1 2 4 8\n\n\nWe’ve now seen three different ways to use the header.\n\nSimply repeat the elements in the header (e.g. print i).\nUse the elements in the header as an index (e.g. select the \\(i^{th}\\) element).\nUse the header to reference past iterations (e.g. i - 1)\n\n\n\n\n\n\n\nDon’t grow vectors!\n\n\n\nIt is tempting to initialize a vector and then grow the vector with a for loop and c(). It is also tempting to initialize a data frame and then grow the data frame with bind_rows(). Because of R’s design, this is computationally very inefficient.\nThis is slow!:\n\nvec &lt;- c(1)\n\nfor (i in 2:10) {\n  \n  vec &lt;- c(vec, i)\n  \n  \n}\n\nvec\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\n\nIt is essential to pre-allocate vectors and then fill them in. It is also easy to make mistakes when creating indices (e.g. 1:length(x) may end up as c(1, 0)). seq_along() is a helpful alternative to :. The following pre-allocates a vector and then uses the length of the vector to create an index.\n\nnumbers &lt;- vector(mode = \"numeric\", length = 5)\n\nnumbers\n\n[1] 0 0 0 0 0\n\nfor (i in seq_along(numbers)) {\n  \n  numbers[i] &lt;- i\n  \n}\n\nnumbers\n\n[1] 1 2 3 4 5\n\n\nLet’s consider a simple random walk with 100 steps. In this case, the person starts at location zero and random takes one step forward or one step back.\n\nposition &lt;- vector(mode = \"numeric\", length = 100)\n\nset.seed(20230530)\nfor (iter in 2:length(position)) {\n  \n  position[iter] &lt;- position[iter - 1] + sample(x = c(-1, 1), size = 1)\n  \n  \n}\n\nposition\n\n  [1]  0 -1  0  1  2  1  0  1  0  1  2  1  0  1  2  1  2  1  2  1  2  1  2  1  2\n [26]  3  4  5  4  3  2  3  4  3  4  3  2  3  2  3  2  3  2  3  2  3  2  1  2  3\n [51]  2  3  4  3  4  5  6  5  6  5  6  7  6  5  6  7  8  9 10 11 12 13 12 13 12\n [76] 11 10  9 10  9  8  9 10 11 12 13 12 11 12 11 12 13 12 13 14 15 14 15 14 15\n\n\n\n\n\n\n\n\nExercise 2\n\n\n\n\nCreate the following list:\n\n\nalphabet &lt;- list(\n  vowels = c(\"a\", \"e\"),\n  confusing = \"y\",\n  consonants = c(\"b\", \"c\", \"d\", \"f\")\n)\n\n\nWrite a for loop and use str_to_upper() to transform all letters to upper case.\n\n\n\n\n\nWhile Loops\nWhile loops are similar to for loops; however, instead of predetermining the number of iterations in the header while loops determine a condition in the header and run until that condition is met. For loops can be rewritten as while loops. It can be useful to track the iteration number. Consider a simple example where we double x every iteration while x &lt; 1000.\n\niteration &lt;- 1\nx &lt;- 2\n\nwhile (x &lt; 1000) {\n  \n  x &lt;- x * 2\n  iteration &lt;- iteration + 1\n  \n}\n\nx \n\n[1] 1024\n\niteration\n\n[1] 10\n\n\n\n\n\n\n\n\nExercise 3\n\n\n\n\nWrite the random walk from the for loop above as a while loop. Stop the while loop when position &lt; -10 or position &gt; 10. How many iterations did it take?\n\n\n\n\n\nif, else, and else if\nif_else() and case_when() apply conditional logic to a vector. We most frequently use those functions inside of mutate() to create a new variable or manipulate an existing variable.\nR also has if, else, and else if, which are used to select sections of code to run. This is incredibly useful when programming outside of data manipulation. For example, we can use if[^] to download a file only if it doesn’t already exist.\n\nif (!file.exists(\"data.csv\")) {\n\n  download.file(url = \"web-url.csv\", destfile = \"data.csv\")\n\n}\n\nSelection control flow has two important pieces. First, there is a conditional statement inside (). If the condition is TRUE, then evaluate. If it is FALSE, then don’t evaluate. Second, there is a body contained in {}. Note the formatting in the above example.\nThe conditional statement must be a single TRUE or FALSE. If your statement involves more than one Boolean, then consider using all(), which evaluates to TRUE if everything is TRUE and any(), which evaluates to TRUE if anay element is TRUE.\nLet’s consider a more sophisticated example.\n\nif (distribution == \"normal\") {\n  \n  x &lt;- rnorm(n = 100)\n  \n} else if (distribution == \"poisson\") {\n  \n  x &lt;- rpois(n = 100, lambda = 8)\n  \n} else {\n  \n  stop(\"distribution mast be normal or poissoin\")\n  \n}\n\nThis style of using if, else if, and else is fundamental for including options in custom functions."
  },
  {
    "objectID": "03_functions.html#custom-functions",
    "href": "03_functions.html#custom-functions",
    "title": "1  Advanced R Programming",
    "section": "1.3 Custom Functions",
    "text": "1.3 Custom Functions\n\n1.3.1 Motivation\nCustom functions are an essential building block for good analyses. Custom functions are useful for abiding by the DRY (don’t repeat yourself) principle. Under our conception of DRY, we should create a function any time we do something three times.\nCopying-and-pasting is typically bad because it is easy to make mistakes and we typically want a single source source of truth in a script. Custom functions also promote modular code design and testing.\nThe bottom line: we want to write clear functions that do one and only one thing that are sufficiently tested so we are confident in their correctness.\n\n\n1.3.2 Examples\nLet’s consider a couple of examples from (Barrientos et al. 2021). This paper is a large-scale simulation of formally private mechanisms, which relates to several future chapters of this book.\nDivision by zero, which returns NaN, can be a real pain when comparing confidential and noisy results when the confidential value is zero. This function simply returns 0 when the denominator is 0.\n\n#' Safely divide number. When zero is in the denominator, return 0. \n#'\n#' @param numerator A numeric value for the numerator\n#' @param denominator A numeric value for the denominator\n#'\n#' @return A numeric ratio\n#'\nsafe_divide &lt;- function(numerator, denominator) {\n  \n  if (den == 0) {\n    \n    return(0)\n    \n  } else {\n    \n    return(num / denom)\n    \n  }\n}\n\nThis function\n\nImplements the laplace or double exponential distribution, which isn’t included in base R.\nApplies a technique called the laplace mechanism.\n\n\n#' Apply the laplace mechanism\n#'\n#' @param eps Numeric epsilon privacy parameter\n#' @param gs Numeric global sensitivity for the statistics of interest\n#'\n#' @return\n#' \nlap_mech &lt;- function(eps, gs) {\n  \n  # Checking for proper values\n  if (any(eps &lt;= 0)) {\n    stop(\"The eps must be positive.\")\n  }\n  if (any(gs &lt;= 0)) {\n    stop(\"The GS must be positive.\")\n  }\n  \n  # Calculating the scale\n  scale &lt;- gs / eps\n\n  r &lt;- runif(1)\n\n  if(r &gt; 0.5) {\n    r2 &lt;- 1 - r\n    x &lt;- 0 - sign(r - 0.5) * scale * log(2 * r2)\n  } else {\n    x &lt;- 0 - sign(r - 0.5) * scale * log(2 * r)\n  }\n  \n  return(x)\n}\n\n\n\n1.3.3 Basics\nR has a robust system for creating custom functions. To create a custom function, use function():\n\nsay_hello &lt;- function() {\n  \n  \"hello\"\n   \n}\n\nsay_hello()\n\n[1] \"hello\"\n\n\nOftentimes, we want to pass parameters/arguments to our functions:\n\nsay_hello &lt;- function(name) {\n  \n  paste(\"hello,\", name)\n   \n}\n\nsay_hello(name = \"aaron\")\n\n[1] \"hello, aaron\"\n\n\nWe can also specify default values for parameters/arguments:\n\nsay_hello &lt;- function(name = \"aaron\") {\n  \n  paste(\"hello,\", name)\n   \n}\n\nsay_hello()\n\n[1] \"hello, aaron\"\n\nsay_hello(name = \"alex\")\n\n[1] \"hello, alex\"\n\n\nsay_hello() just prints something to the console. More often, we want to perform a bunch of operations and the then return some object like a vector or a data frame. By default, R will return the last unassigned object in a custom function. It isn’t required, but it is good practice to wrap the object to return in return().\nIt’s also good practice to document functions. With your cursor inside of a function, go Insert &gt; Insert Roxygen Skeleton:\n\n#' Say hello\n#'\n#' @param name A character vector with names\n#'\n#' @return A character vector with greetings to name\n#' \nsay_hello &lt;- function(name = \"aaron\") {\n  \n  greeting &lt;- paste(\"hello,\", name)\n  \n  return(greeting)\n  \n}\n\nsay_hello()\n\n[1] \"hello, aaron\"\n\n\nAs you can see from the Roxygen Skeleton template above, function documentation should contain the following:\n\nA description of what the function does\nA description of each function argument, including the class of the argument (e.g. string, integer, dataframe)\nA description of what the function returns, including the class of the object\n\nTips for writing functions:\n\nFunction names should be short but effectively describe what the function does. They generally should be verbs while function arguments should be nouns. See the Tidyverse style guide for more details on function naming and style.\nAs a general principle, functions should each do only one task. This makes it much easier to debug your code and reuse functions!\nUse :: (e.g. dplyr::filter()) when writing custom functions. This will create stabler code and make it easier to develop R packages.\n\n\n\n1.3.4 Functions with Multiple Outputs\nWhen return() is reached in a function, return() is evaluated and evaluation ends and R leaves the function.\n\nsow_return &lt;- function() {\n  \n  return(\"The function stops!\")\n  \n  return(\"This never happens!\")\n  \n}\n\nsow_return()\n\n[1] \"The function stops!\"\n\n\nIf the end of a function is reached without calling return(), the value from the last evaluated expression is returned.\nWe prefer to include return() at the end of functions for clarity even though return() doesn’t change the behavior of the function.\nSometimes we want to return more than one vector or data frame. list() is very helpful in these siutations.\n\nsummarize_results &lt;- function(x) {\n  \n  mean_x &lt;- mean(x)\n  \n  median_x &lt;- median(x)\n  \n  results &lt;- list(\n    mean = mean_x,\n    median = median_x\n  )\n  \n  return(results)\n  \n}\n\nsummarize_results(x = 1:10)\n\n$mean\n[1] 5.5\n\n$median\n[1] 5.5\n\n\n\n\n1.3.5 Referential Transparency\nR functions, like mathematical functions, should always return the exact same output for a given set of inputs1. This is called referential transparency. R will not enforce this idea, so you must write good code.\n\nBad!\n\nbad_function &lt;- function(x) {\n  \n  x * y\n  \n}\n\ny &lt;- 2\nbad_function(x = 2)\n\n[1] 4\n\ny &lt;- 3\nbad_function(x = 2)\n\n[1] 6\n\n\n\n\nGood!\n\ngood_function &lt;- function(x, y) {\n  \n  x * y\n  \n}\n  \ny &lt;- 2\ngood_function(x = 2, y = 1)\n\n[1] 2\n\ny &lt;- 3\ngood_function(x = 2, y = 1)\n\n[1] 2\n\n\nBruno Rodriguez has a book and a blog that explores this idea further."
  },
  {
    "objectID": "03_functions.html#debugging",
    "href": "03_functions.html#debugging",
    "title": "1  Advanced R Programming",
    "section": "1.4 Debugging",
    "text": "1.4 Debugging\nR code inside of custom functions can be tougher to troubleshoot than R code outside of custom functions. Fortunately, R has a powerful debugging tool.\nThe debugger requires putting custom functions in their own scripts. This is covered in Section 1.6.\nTo set up the debugger, simply select the red dot to the left of a line of code in a custom function and then source the custom function. After, there should be a red dot next to the defined function in the global environment.\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n(b)\n\n\n\n\nFigure 1.1: Setting up the debugger\n\n\nNow, when the function is called it will stop at the red dot (the stop point). Importantly, the environment should reflect the environment inside of the function instead of the global environment.\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n(b)\n\n\n\n\nFigure 1.2: Using the debugger\n\n\nFinally, RStudio gives several controls for the debugger. There is a button to Continue to the end of the function. There is a button to Stop execution.\nThere is also a button with two brackets and a green arrow. This steps the debugger into another function. This is incredibly useful when functions are nested inside of functions.\n\n\n\n\n\n\n\nExercise 4\n\n\n\n\nCreate a custom function with at least three different pieces of R code.\nSave the function in a .R script with the same name as the function.\nClick the little red dot to the left of first line of code in the .R script.\nSource the function with the source button at the top right.\nCall the function. You should enter the debugger."
  },
  {
    "objectID": "03_functions.html#benchmarking",
    "href": "03_functions.html#benchmarking",
    "title": "1  Advanced R Programming",
    "section": "1.5 Benchmarking",
    "text": "1.5 Benchmarking\nBenchmarking is the process of estimating the run time of code. Oftentimes, benchmarking is used to compare multiple pieces of code to pick the more performant code. This raises a couple of issues:\n\nComputing environments differ. My MacBook Pro with Apple M1 chips typically outperforms my work computer.\nOther software can slow performance. When I open up Spotify my R processes typically slow down.\n\nWe can’t solve problem 1 with an R package, but we can solve problem 2 by running tests multiple times. library(microbenchmark) makes this very easy.\nSuppose we are interested in the median of a vector of 1 million numbers. We can easily calculate this with median() or quantile(). Suppose we are concerned about computation speed, so lets test the code performance:\n\nlibrary(microbenchmark)\n\nx &lt;- 1:1000000\n\nmicrobenchmark::microbenchmark(\n  median(x),\n  quantile(x, probs = 0.5)\n)\n\nUnit: milliseconds\n                     expr      min       lq     mean   median       uq\n                median(x) 8.512209 8.703917 9.475962 8.821355 9.581271\n quantile(x, probs = 0.5) 5.058418 5.181897 5.630817 5.231751 6.191083\n       max neval cld\n 41.582959   100  a \n  7.935667   100   b\n\n\n\n\n\n\n\n\nExercise 5\n\n\n\nLet’s compare %&gt;% and |&gt; to see if they have comparable computation times. Consider this example from Stack Overflow, which shows |&gt; is clearly better.\n\nLoad library(microbenchmark) and add the microbenchmark() function.\nCreate x1 &lt;- 1:1000000, x2 &lt;- 1:1000000, and x3 &lt;- 1:1000000\nTest median(x1), x2 |&gt; median(), and x3 %&gt;% median()."
  },
  {
    "objectID": "03_functions.html#sec-organizing-an-analysis",
    "href": "03_functions.html#sec-organizing-an-analysis",
    "title": "1  Advanced R Programming",
    "section": "1.6 Organizing an Analysis",
    "text": "1.6 Organizing an Analysis\nWe recommend writing functions for data analysis. We need a plan for how to add custom functions to our workflow built on RStudio projects and Quarto.\nWe typically recommending adding a directory called R or src in a project directory and then sourcing scripts in to Quarto documents. Keeping functions in separate scripts makes the functions easier to use in multiple documents and simplifies the debugging process outlined above.\nWe typically only add one function to an R script in the R/ directory and name the script after the function (without parentheses). Next, we source function scripts at the top of Quarto documents after loading packages with the source(). library(here) is essential if when sourcing from a Quarto document that is in a subdirectory of the project."
  },
  {
    "objectID": "03_functions.html#packages",
    "href": "03_functions.html#packages",
    "title": "1  Advanced R Programming",
    "section": "1.7 Packages",
    "text": "1.7 Packages\nAt some point, the same scripts or data are used often enough or widely enough to justify moving from sourced R scripts to a full-blown R package. R packages make it easier to\n\nMake it easier to share and version code.\nImprove documentation of functions and data.\nMake it easier to test code.\nOften lead to fun hex stickers.\n\n\n1.7.1 Use This\nlibrary(usethis) includes an R package template. The following will add all necessary files for an R package to a directory called testpackage/ and open an RStudio package.\n\nlibrary(usethis)\ncreate_package(\"/Users/adam/testpackage\")\n\n\n\n1.7.2 Package contents\nThe template includes a lot of different files and directories. We will focus on the minimum sufficient set of files for building a package.\nDESCRIPTION contains the meta information about the package. Important lines include the package version and the license. Package versions are useful for tracking the version of the package used with an analysis. library(usethis) has a helper function for picking a license.\nPackage: testpackage\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"First\", \"Last\", , \"first.last@example.com\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"YOUR-ORCID-ID\"))\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\n\n\n1.7.3 Functions\nFunctions go in the R directory, just like when we sourced functions earlier. Be sure to reference packages directly with :: (e.g. stats::lm()).\n\nRoxygen\nIt is essential to use Roxygen skeletons with custom functions. RStudio makes this simple. Place the cursor in a function and select Code &gt; Insert Roxygen Skeleton. The Roxygen skeleton creates help documentation for a package, which can be accessed with ?.\n#' Title\n#'\n#' @param\n#'\n#' @return\n#' @export\n#'\n#' @examples\nThe title should be a brief description of the function. param describes each input to the function and return describes the output of the function.\n\n\nTests"
  },
  {
    "objectID": "03_functions.html#unit-testing",
    "href": "03_functions.html#unit-testing",
    "title": "1  Advanced R Programming",
    "section": "1.8 Unit testing",
    "text": "1.8 Unit testing\nUnit testing is the systematic testing of functions to ensure correctness."
  },
  {
    "objectID": "03_functions.html#test-coverage",
    "href": "03_functions.html#test-coverage",
    "title": "1  Advanced R Programming",
    "section": "1.9 Test coverage",
    "text": "1.9 Test coverage\nTest coverage is the scope and quality of tests performed on a code base."
  },
  {
    "objectID": "03_functions.html#references",
    "href": "03_functions.html#references",
    "title": "1  Advanced R Programming",
    "section": "1.10 References",
    "text": "1.10 References\n\n\n\n\nBarrientos, Andrés F., Aaron R. Williams, Joshua Snoke, and Claire McKay Bowen. 2021. “A Feasibility Study of Differentially Private Summary Statistics and Regression Analyses with Evaluations on Administrative and Survey Data.” https://doi.org/10.48550/ARXIV.2110.12055."
  },
  {
    "objectID": "03_functions.html#footnotes",
    "href": "03_functions.html#footnotes",
    "title": "1  Advanced R Programming",
    "section": "",
    "text": "This rule won’t exactly hold if the function contains random or stochastic code. In those cases, the function should return the same output every time if the seed is set with set.seed().↩︎"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Barrientos, Andrés F., Aaron R. Williams, Joshua Snoke, and Claire McKay\nBowen. 2021. “A Feasibility Study of Differentially Private\nSummary Statistics and Regression Analyses with Evaluations on\nAdministrative and Survey Data.” https://doi.org/10.48550/ARXIV.2110.12055."
  }
]