[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science for Public Policy Part II",
    "section": "",
    "text": "Welcome\nThis book is the notes for Advanced Data Science for Public Policy in the McCourt School of Public Policy at Georgetown University."
  },
  {
    "objectID": "index.html#acknowledgements-more-to-come",
    "href": "index.html#acknowledgements-more-to-come",
    "title": "Data Science for Public Policy Part II",
    "section": "Acknowledgements (More to come!)",
    "text": "Acknowledgements (More to come!)\nThis book has benefited from many great teachers, collaborators, and students. First, I want to thank Gabe Morrison for excellent reviews and proofreading. Second, I want to thank Alex Engler and Alena Stern for collaborating on Intro to Data Science for Public Policy during six semesters and eight classes."
  },
  {
    "objectID": "01_advanced-quarto.html#sec-review",
    "href": "01_advanced-quarto.html#sec-review",
    "title": "1  Advanced Quarto",
    "section": "1.1 Review",
    "text": "1.1 Review\n\n1.1.1 Motivation\nThere are many problems worth avoiding in an analysis:\n\nCopying-and-pasting, transposing, and manual repetition\nRunning code out-of-order\nMaintaining parallel documents like a script for analysis and a doc for narrative\nCode written for computers that is tough to parse by humans\n\nNot convinced? Maybe we just want to make cool stuff like websites, blogs, books, and slide decks.\nQuarto, a literate statistical programming framework for R, Python, and Julia helps us solve many of these problems. Quarto uses\n\nplain text files ending in .qmd that are similar to .R and .Rmd files\nlibrary(knitr)\npandoc1\n\nQuarto uses library(knitr) and pandoc to convert plain text .qmd documents into rich output documents like these class notes. The “Render” button appears in RStudio with a .qmd file is open in the editor window.\nClicking the “Render” button begins the process of rendering .qmd files.\n\n\n\n\n\n\n\n\n\nWhen the button is clicked, Quarto calls library(knitr) and renders .qmd (Quarto files) into .md (Markdown files), which Pandoc then converts into any specified output type. Quarto and library(knitr) don’t need to be explicitly loaded as the entire process is handled by clicking the “Render” button in RStudio.\n\n\n\n\n\n\n\n\n\nSource: Quarto website\nQuarto, library(knitr), and Pandoc are all installed with RStudio. You will need to install a LaTeX distribution to render PDFs. We recommend library(tinytex) as a LaTeX distribution (installation instructions).\n\n\n\n\n\n\nExercise 1\n\n\n\n\nClick the new script button in RStudio and add a “Quarto Document”.\nGive the document a name, an author, and ensure that HTML is selected.\nSave the document as “hello-quarto.qmd”.\nClick “Render”.\n\n\n\nQuarto has three main ingredients:\n\nYAML header\nMarkdown text\nCode chunks\n\n\n\n1.1.2 (1) YAML Header\nYAML stands for “yet another markup language”. The YAML header contains meta information about the document including output type, document settings, and parameters that can be passed to the document. The YAML header starts with --- and ends with ---.\nHere is the simplest YAML header for a PDF document:\n---\nformat: pdf\n---\nYAML headers can contain many output specific settings. This YAML header creates an HTML document with code folding and a floating table of contents:\n---\nformat: \n  html:\n    embed-resources: true\n    code-fold: true\n    toc: true\n---  \nParameters can be specified as follows\n---\nformat: pdf\nparams:\n  state: \"Virginia\"\n---\nNow state can be referred to anywhere in R code as params$state. Parameters are useful for a couple of reasons:\n\nWe can clearly change key values for a Quarto document in the YAML header.\nWe can create a template and programmatically iterate the template over a set of values with the quarto_render() function and library(purrr). This blog outlines the idea. The Mobility Metrics Data Tables and SLFI State Fiscal Briefs are key examples of this workflow.\n\n\n\n\n\n\n\nWarning\n\n\n\nUnlike R Markdown, images and other content are not embedded in .html from Quarto by default. Be sure to include embed-resources: true in YAML headers to embed content and make documents easier to share.\nSuppose we embed an image called image.png in a Quarto document called example.qmd, which, when rendered, creates example.html. If we don’t include embed-resources: true, then we will need to share image.png and example.html to see the embedded image. This is also true for other files like .css.\n\n\n\n\n1.1.3 (2) Markdown text\nMarkdown is a shortcut for HyperText Markup Language (HTML). Essentially, simple meta characters corresponding to formatting are added to plain text.\nTitles and subtitltes\n------------------------------------------------------------\n\n# Title 1\n\n## Title 2\n\n### Title 3\n\n\nText formatting \n------------------------------------------------------------\n\n*italic*  \n\n**bold**   \n\n`code`\n\nLists\n------------------------------------------------------------\n\n* Bulleted list item 1\n* Item 2\n  * Item 2a\n  * Item 2b\n\n1. Item 1\n2. Item 2\n\nLinks and images\n------------------------------------------------------------\n\n[text](http://link.com)\n\n![Penguins](images/penguins.png)\n\n\n1.1.4 (3) Code chunks\n\n\n\n\n\nMore frequently, code is added in code chunks:\n\n```{r}\n2 + 2\n```\n\n[1] 4\n\n\nThe first argument inline or in a code chunk is the language engine. Most commonly, this will just be a lower case r. knitr allows for many different language engines:\n\nR\nJulia\nPython\nSQL\nBash\nRcpp\nStan\nJavascript\nCSS\n\nQuarto has a rich set of options that go inside of the chunks and control the behavior of Quarto.\n\n```{r}\n#| label: important-calculation\n#| eval: false\n\n2 + 2\n```\n\nIn this case, eval makes the code not run. Other chunk-specific settings can be added inside the brackets. Here2 are the most important options:\n\n\n\nOption\nEffect\n\n\n\n\necho: false\nHides code in output\n\n\neval: false\nTurns off evaluation\n\n\noutput: false\nHides code output\n\n\nwarning: false\nTurns off warnings\n\n\nmessage: false\nTurns off messages\n\n\nfig-height: 8\nChanges figure width in inches3\n\n\nfig-width: 8\nChanges figure height in inches4\n\n\n\nDefault settings for the entire document can be changed in the YAML header with the execute option:\nexecute:\n  warning: false\n\n\n\n\n\n\nExercise 2\n\n\n\n\nAdd date: today to your YAML header after title. This will update every time the document is rendered.\nCopy the Markdown table from this table generator and add it to your .qmd document.\nCreate a scatter plot of the cars data with library(ggplot2). Adjust the figure width and height using options within the chunk.\nClick “Render”.\n\n\n\n\n\n1.1.5 Organizing a Quarto Document\nIt is important to clearly organize a Quarto document and the constellation of files that typically support an analysis.\n\nAlways use .Rproj files.\nUse sub-directories to sort images, .css, data.\n\nLater, we will learn how to use library(here) to effectively organize sub-directories."
  },
  {
    "objectID": "01_advanced-quarto.html#math-notation",
    "href": "01_advanced-quarto.html#math-notation",
    "title": "1  Advanced Quarto",
    "section": "1.2 Math Notation",
    "text": "1.2 Math Notation\nThis course uses probability and statistics. Occasionally, we want to easily communicate with mathematical notation. For example, it may be convenient to type that \\(X\\) is a random variable that follows a standard normal distribution (mean = 0 and standard deviation = 1).\n\\[X \\sim N(\\mu = 0, \\sigma = 1)\\]\n\n1.2.1 Math Mode\nUse $ to start and stop in-line math notation and $$ to start multi-line math notation. Math notation uses LaTeX’s syntax for mathematical notation.\nHere’s an example with in-line math:\nConsider a binomially distributed random variable, $X \\sim binom(n, p)$. \nConsider a binomially distributed random variable, \\(X \\sim binom(n, p)\\).\nHere’s an example with a chunk of math:\n$$\nP(X = x) = {n \\choose x} p ^ x (1 - p) ^ {n - x}\n$${#eq-binomial}\n\\[\nP(X = x) = {n \\choose x} p ^ x (1 - p) ^ {n - x}\n\\tag{1.1}\\]\n\n\n1.2.2 Important Syntax\nMath mode recognizes basic math symbols available on your keyboard including +, -, *, /, &gt;, &lt;, (, and ).\nMath mode contains all greek letters. For example, \\alpha (\\(\\alpha\\)) and \\beta (\\(\\beta\\)).\n\n\nTable 1.1: My Caption\n\n\nLaTeX\nSymbol\n\n\n\n\n\\alpha\n\\(\\alpha\\)\n\n\n\\beta\n\\(\\beta\\)\n\n\n\\gamma\n\\(\\gamma\\)\n\n\n\\Delta\n\\(\\Delta\\)\n\n\n\\epsilon\n\\(\\epsilon\\)\n\n\n\\theta\n\\(\\theta\\)\n\n\n\\pi\n\\(\\pi\\)\n\n\n\\sigma\n\\(\\sigma\\)\n\n\n\\chi\n\\(\\chi\\)\n\n\n\n\nMath mode also recognizes \\(\\log(x)\\) (\\log(x)) and \\(\\sqrt{x}\\) (\\sqrt{x}).\nSuperscripts (^) are important for exponentiation and subscripts (_) are important for adding indices. y = x ^ 2 renders as \\(y = x ^ 2\\) and x_1, x_2, x_3 renders as \\(x_1, x_2, x_3\\). Brackets are useful for multi-character superscripts and subscripts like \\(s_{11}\\) (s_{11}).\nIt is useful to add symbols to letters. For example, \\bar{x} is useful for sample means (\\(\\bar{x}\\)), \\hat{y} is useful for predicted values (\\(\\hat{y}\\)), and \\vec{\\beta} is useful for vectors of coefficients (\\(\\vec{\\beta}\\)).\nMath mode supports fractions with \\frac{x}{y} (\\(\\frac{x}{y}\\)), big parentheses with \\left(\\right) (\\(\\left(\\right)\\)), and brackets with \\left[\\right] (\\(\\left[\\right]\\)).\nMath mode has a symbol for summation. Let’s combine it with bars, fractions, subscripts, and superscipts to show sample mean \\bar{x} = \\frac{1}{n}\\sum_i^n x_i, which looks like \\(\\bar{x} = \\frac{1}{n}\\sum_i^n x_i\\).\n\\sim is how to add the tilde for distributed as. For example, X \\sim N(\\mu = 0, \\sigma = 1) shows the normal distribution \\(X \\sim N(\\mu = 0, \\sigma = 1)\\).\nMatrices are are a little bit more work in math mode. Consider the follow variance-covariance matrix:\n\\begin{bmatrix}\ns_{11}^2 & s_{12}\\\\\ns_{21} & s_{22}^2\n\\end{bmatrix}\n\\[\n\\begin{bmatrix}\ns_{11}^2 & s_{12}\\\\\ns_{21} & s_{22}^2\n\\end{bmatrix}\n\\]\nThis guide provides and exhaustive look at math options in Quarto.\n\n\n\n\n\n\nWarning\n\n\n\nMath mode is finicky! Small errors like mismatched parentheses or superscript and subscript errors will cause Quarto documents to fail to render. Write math carefully and render early and often.\n\n\n\n\n\n\n\n\nExercise 3\n\n\n\n\nUse math mode to type out the equation for root mean square error (RMSE).\nDo you divide by n or n - 1?"
  },
  {
    "objectID": "01_advanced-quarto.html#cross-references",
    "href": "01_advanced-quarto.html#cross-references",
    "title": "1  Advanced Quarto",
    "section": "1.3 Cross References",
    "text": "1.3 Cross References\nCross references are useful for organizing documents that include sections, figures, tables, and equations. Cross references create hyperlinks within documents that jump to the locations of these elements. Linking sections, figures, tables, or equations helps readers navigate the document.\nCross references also automatically number the referenced elements. This means that if there are two tables (ie. Table 1 and Table 2) and a table is added between the two tables, all of the table numbers and references to the tables will automatically update.\nCross references require two bits of code within a Quarto document:\n\nA label associated with the section, figure, table, or equation.\nA reference to the labelled section, figure, table, or equation.\n\nLabels are written in brackets or as arguments in code chunks, and begin with the the type object being linked. References begin with @ followed by the label of object being linked.\n\n1.3.1 Sections\nLinking sections helps readers navigate between sections. Use brackets to label sections after headers and always begin labels with sec-. Then you can reference that section with @sec-.\n## Review {#sec-review}\n\nSee @sec-review if you are totally lost.\nThe cross references shows up like this: See Section 1.1 if you are totally lost.\nIt can be helpful to turn on section numbering with number-sections: true in the YAML header. Additionally, Markdown has a native method for linking between sections.\n\n\n\n\n\n\nExercise 4\n\n\n\n\nAdd a few section headers to your Quarto document.\nAdd a cross reference to one of the section headers.\n\n\n\n\n\n1.3.2 Figures\n\n\n\nFigure 1.1: Penguins\n\n\nWe can reference figures like Figure 1.1 with @fig-penguins.\n\n\n1.3.3 Tables\nWe can link to tables in our documents. For example, we can link to the greek table with @tbl-greek Table 1.1.\n\n\n1.3.4 Equations\nWe can link to equations in our documents. For example, we can link to the binomial distribution earlier with @eq-binomial Equation 1.1.\n\n\n\n\n\n\nExercise 5\n\n\n\n\nAdd a cross reference to your RMSE equation from earlier."
  },
  {
    "objectID": "01_advanced-quarto.html#citations",
    "href": "01_advanced-quarto.html#citations",
    "title": "1  Advanced Quarto",
    "section": "1.4 Citations",
    "text": "1.4 Citations\n\n1.4.1 Zotero\nZotero is a free and open-source software for organizing research and managing citations.\n\n\n\n\n\n\nDigital Object Identifier (DOI)\n\n\n\nDOIs are persistent identifiers that uniquely identify objects including many academic papers. For example, 10.1198/jcgs.2009.07098 identifies “A Layered Grammar of Graphics” by Hadley Wickham.\n\n\n\n\n\n\n\n\nExercise 6\n\n\n\n\nInstall Zotero.\nFind the DOI for “Tidy Data” by Hadley Wickham.\nClick the magic wand in Zotero and paste the DOI.\n\n\n\n\n\n\n\n\n\n\n\nReview the new entry in Zotero.\n\n\n\n\n\n1.4.2 Zotero Integration\nZotero has a powerful integration with Quarto. In practice, it’s one click to add a DOI to Zotero and then one click to add a citation to Quarto.\nRStudio automatically adds My Library from Zotero. Simply switch to the Visual Editor (top left in RStudio), click “Insert”, and click “Citation”. This will open a prompt to insert a citation into the Quarto document.\nThe citation is automatically added with parentheses to go at the end of sentences. Delete the square brackets to convert the citation to an in-line citation.\nInserting the citation automatically adds the citation to the references section. Deleting the reference automatically deletes the citation from the references section.\nZotero Groups are useful for sharing citations and Zotero Group Libraries need to be added to RStudio. To set this up:\nTo set this up, in RStudio:\n\nGo to Tools and select “Global Options”\nSelect “RMarkdown” and then click “Citations”\nFor “Use Libraries” choose “Selected Libraries”\nSelect the group libraries to add\n\n\n\n\n\n\n\nExercise 7\n\n\n\n\nCite “Tidy Data” by Hadley Wickham in your Quarto document.\nClick “Render”"
  },
  {
    "objectID": "01_advanced-quarto.html#more-resources",
    "href": "01_advanced-quarto.html#more-resources",
    "title": "1  Advanced Quarto",
    "section": "1.5 More Resources",
    "text": "1.5 More Resources\n\nQuarto Guide\nIterating fact sheets and web pages with Quarto"
  },
  {
    "objectID": "01_advanced-quarto.html#footnotes",
    "href": "01_advanced-quarto.html#footnotes",
    "title": "1  Advanced Quarto",
    "section": "",
    "text": "Pandoc is free software that converts documents between markup formats. For example, Pandoc can convert files to and from markdown, LaTeX, jupyter notebook (ipynb), and Microsoft Word (.docx) formats, among many others. You can see a comprehensive list of files Pandoc can convert on their About Page.↩︎\nThis table was typed as Markdown code. But sometimes it is easier to use a code chunk to create and print a table. Pipe any data frame into knitr::kable() to create a table that will be formatted in the output of a rendered Quarto document.↩︎\nThe default dimensions for figures change based on the output format. Visit here to learn more.↩︎\nThe default dimensions for figures change based on the output format. Visit here to learn more.↩︎"
  },
  {
    "objectID": "02_advanced-data-cleaning.html#sec-review2",
    "href": "02_advanced-data-cleaning.html#sec-review2",
    "title": "2  Advanced Data Cleaning",
    "section": "2.1 Review",
    "text": "2.1 Review\nR for Data Science (2e) displays the first steps of the data science process as “Import”, “Tidy”, and “Transform”. DSPP1 introduced important techniques for importing data like read_csv() and querying web APIs, for tidying data like pivot_longer(), and for transforming data like mutate().\n\n\n\n\n\n\nExercise 1\n\n\n\n\nUse mutate() and case_when() to a new variable to cars where the values are \"slow\" when speed &lt; 10, \"moderate\" when speed &lt; 20, and \"fast\" otherwise."
  },
  {
    "objectID": "02_advanced-data-cleaning.html#sec-import",
    "href": "02_advanced-data-cleaning.html#sec-import",
    "title": "2  Advanced Data Cleaning",
    "section": "2.2 Import",
    "text": "2.2 Import\n\n2.2.1 library(here)\nDeveloping Quarto documents in subdirectories is a pain. When interactively running code in the console, file paths are read as if the .qmd file is in the same folder as the .Rproj. When clicking render, paths are treated as if they are in the subdirectory where the .qmd file is.\nlibrary(here) resolves headaches around file referencing in project-oriented workflows.\nLoading library(here) will print your working directory.\n\nlibrary(here)\n\nhere() starts at /Users/aaronwilliams/presentations/data-science-for-public-policy2\n\n\nAfter this, here() will use reasonable heuristics to find project files using relative file paths. When placing Quarto documents in a directory below the top-level directory, use here() and treat each folder and file as a different string.\nBefore\n\nread_csv(\"data/raw/important-data.csv\")\n\nAfter\n\nread_csv(here(\"data\", \"raw\", \"important-data.csv\"))\n\n\n\n2.2.2 library(readxl)\nWe will focus on reading data from Excel workbooks. Excel is a bad tool with bad design that has led to many analytical errors. Unfortunately, it’s a dominant tool for storing data and often enters the data science workflow.\nlibrary(readxl) is the premier package for reading data from .xls and .xlsx files. read_excel(), which works like read_csv(), loads data from .xls and .xlsx files. Consider data from the Urban Institute’s Debt in America feature accessed through the Urban Institute Data Catalog.\n\nlibrary(readxl)\n\nread_excel(here(\"data\", \"state_dia_delinquency_ 7 Jun 2022.xlsx\"))\n\n# A tibble: 51 × 28\n   fips  state_name          state Share with Any Debt …¹ Share with Any Debt …²\n   &lt;chr&gt; &lt;chr&gt;               &lt;chr&gt; &lt;chr&gt;                  &lt;chr&gt;                 \n 1 01    Alabama             AL    .3372881               .5016544              \n 2 02    Alaska              AK    .1672429               .221573               \n 3 04    Arizona             AZ    .2666938               .3900013              \n 4 05    Arkansas            AR    .3465793               .5426918              \n 5 06    California          CA    .2087713               .2462195              \n 6 08    Colorado            CO    .213803                .3554938              \n 7 09    Connecticut         CT    .2194708               .3829038              \n 8 10    Delaware            DE    .2866829               .469117               \n 9 11    District of Columb… DC    .2232908               .3485817              \n10 12    Florida             FL    .2893825               .3439322              \n# ℹ 41 more rows\n# ℹ abbreviated names: ¹​`Share with Any Debt in Collections, All`,\n#   ²​`Share with Any Debt in Collections, Communities of Color`\n# ℹ 23 more variables:\n#   `Share with Any Debt in Collections, Majority White Communities` &lt;chr&gt;,\n#   `Median Debt in Collections, All` &lt;chr&gt;,\n#   `Median Debt in Collections, Communities of Color` &lt;chr&gt;, …\n\n\nread_excel() has several useful arguments:\n\nsheet selects the sheet to read.\nrange selects the cells to read and can use Excel-style ranges like “C34:D50”.\nskip skips the selected number of rows.\nn_max selects the maximum number of rows to read.\n\nExcel encourages bad habits and untidy data, so these arguments are useful for extracting data from messy Excel workbooks.\nreadxl_example() contains a perfect example. The workbook contains two sheets, which we can see with excel_sheets().\n\nreadxl_example(\"clippy.xlsx\") |&gt;\n  excel_sheets()\n\n[1] \"list-column\"    \"two-row-header\"\n\n\nAs is common with many Excel workbooks, the second sheet contains a second row of column names with parenthetical comments about each column.1\n\nreadxl_example(\"clippy.xlsx\") |&gt;  \n  read_excel(sheet = \"two-row-header\")\n\n# A tibble: 2 × 4\n  name       species              death                 weight    \n  &lt;chr&gt;      &lt;chr&gt;                &lt;chr&gt;                 &lt;chr&gt;     \n1 (at birth) (office supply type) (date is approximate) (in grams)\n2 Clippy     paperclip            39083                 0.9       \n\n\nThis vignette suggests a simple solution to this problem.\n\n# extract the column names\ncol_names &lt;- readxl_example(\"clippy.xlsx\") |&gt;  \n  read_excel(sheet = \"two-row-header\", n_max = 0) |&gt;\n  names()\n\n# load the data and add the column names\nreadxl_example(\"clippy.xlsx\") |&gt;  \n    read_excel(\n      sheet = \"two-row-header\", \n      skip = 2,\n      col_names = col_names\n    )\n\n# A tibble: 1 × 4\n  name   species   death               weight\n  &lt;chr&gt;  &lt;chr&gt;     &lt;dttm&gt;               &lt;dbl&gt;\n1 Clippy paperclip 2007-01-01 00:00:00    0.9\n\n\n\n\n\n\n\n\nExercise 2\n\n\n\nThe IRS Statistics of Income Division is one of the US’s 13 principal statistical agencies. They publish rich information derived from tax returns. We will focus on Table 2, Adjusted Gross Income (AGI) percentiles by state.\n\nRead in the 52 cells in the first column that contain “United States”, all 50 states, and the “District of Columbia”.\nIdentify the cells containing data for “Adjusted gross income floor on percentiles”. Read in the data with read_excel(). Either programmatically read in the column names (i.e. “Top 1 Percent”, …) or assign them with col_names().\nUse bind_cols() to combine the data from step 1 and step 2.\n\n\n\nlibrary(tidyxl) contains tools for working with messy Excel workbooks, library(openxlsx) contains tools for creating Excel workbooks with R, and library(googlesheets4) contains tools for working with Google Sheets."
  },
  {
    "objectID": "02_advanced-data-cleaning.html#sec-tidy",
    "href": "02_advanced-data-cleaning.html#sec-tidy",
    "title": "2  Advanced Data Cleaning",
    "section": "2.3 Tidy",
    "text": "2.3 Tidy\nThe defining opinion of the tidyverse is its wholehearted adoption of tidy data. Tidy data has three features:\n\nEach variable forms a column.\nEach observation forms a row.\nEach type of observational unit forms a dataframe.\n\n\nTidy datasets are all alike, but every messy dataset is messy in its own way. ~ Hadley Wickham\n\nlibrary(tidyr) is the main package for tidying untidy data. We’ll practice some skills using examples from three workbooks from the IRS SOI.\npivot_longer() is commonly used for tidying data and for making data longer for library(ggplot2). pivot_longer() reorients data so that key-value pairs expressed as column name-column value are column value-column value in adjacent columns. pivot_longer() has three essential arguments:\n\ncols is a vector of columns to pivot (or not pivot).\nnames_to is a string for the name of the column where the old column names will go (i.e. “series” in the figure).\nvalues_to is a string for the name of the column where the values will go (i.e. “rate” in the figure).\n\n\n\n\n\n\npivot_wider() is the inverse of pivot_longer().\n\nTidying Example 1\n\nUntidyCleaned\n\n\nWhy aren’t the data tidy?\n\ntable1 &lt;- tribble(\n  ~state, ~agi2006, ~agi2016, ~agi2020,\n  \"Alabama\", 95067, 114510, 138244,\n  \"Alaska\", 17458, 23645, 26445,\n  \"Arizona\", 146307, 181691, 245258\n)\n\ntable1\n\n# A tibble: 3 × 4\n  state   agi2006 agi2016 agi2020\n  &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 Alabama   95067  114510  138244\n2 Alaska    17458   23645   26445\n3 Arizona  146307  181691  245258\n\n\n\n\nYear is a variable. This data is untidy because year is included in the column names.\n\ntable1 &lt;- tribble(\n  ~state, ~agi2006, ~agi2016, ~agi2020,\n  \"Alabama\", 95067, 114510, 138244,\n  \"Alaska\", 17458, 23645, 26445,\n  \"Arizona\", 146307, 181691, 245258\n)\n\ntable1\n\n# A tibble: 3 × 4\n  state   agi2006 agi2016 agi2020\n  &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 Alabama   95067  114510  138244\n2 Alaska    17458   23645   26445\n3 Arizona  146307  181691  245258\n\npivot_longer(\n  data = table1, \n  cols = -state, \n  names_to = \"year\", \n  values_to = \"agi\"\n)\n\n# A tibble: 9 × 3\n  state   year       agi\n  &lt;chr&gt;   &lt;chr&gt;    &lt;dbl&gt;\n1 Alabama agi2006  95067\n2 Alabama agi2016 114510\n3 Alabama agi2020 138244\n4 Alaska  agi2006  17458\n5 Alaska  agi2016  23645\n6 Alaska  agi2020  26445\n7 Arizona agi2006 146307\n8 Arizona agi2016 181691\n9 Arizona agi2020 245258\n\n\nThe year column isn’t useful yet. We’ll fix that later.\n\n\n\n\nlibrary(tidyr) contains several functions to split values into multiple cells.\n\nseparate_wider_delim() separates a value based on a delimeter and creates wider data.\nseparate_wider_position() separates a value based on position and creates wider data.\nseparate_longer_delim() separates a value based on a delimeter and creates longer data.\nseparate_longer_position() separates a value based on position and creates longer data.\n\n\n\nTidying Example 2\n\nUntidyCleaned\n\n\nWhy aren’t the data tidy?\n\ntable2 &lt;- tribble(\n  ~state, ~`agi2006|2016|2020`,\n  \"Alabama\", \"95067|114510|138244\",\n  \"Alaska\", \"17458|23645|26445\",\n  \"Arizona\", \"146307|181691|245258\"\n)\n\ntable2\n\n# A tibble: 3 × 2\n  state   `agi2006|2016|2020` \n  &lt;chr&gt;   &lt;chr&gt;               \n1 Alabama 95067|114510|138244 \n2 Alaska  17458|23645|26445   \n3 Arizona 146307|181691|245258\n\n\n\n\nThe values for 2006, 2016, and 2020 are all squished into one cell.\n\ntable2 &lt;- tribble(\n  ~state, ~`agi2006|2016|2020`,\n  \"Alabama\", \"95067|114510|138244\",\n  \"Alaska\", \"17458|23645|26445\",\n  \"Arizona\", \"146307|181691|245258\"\n)\n\ntable2\n\n# A tibble: 3 × 2\n  state   `agi2006|2016|2020` \n  &lt;chr&gt;   &lt;chr&gt;               \n1 Alabama 95067|114510|138244 \n2 Alaska  17458|23645|26445   \n3 Arizona 146307|181691|245258\n\nseparate_wider_delim(\n  data = table2, \n  cols = `agi2006|2016|2020`, \n  delim = \"|\",\n  names = c(\"2006\", \"2016\", \"2020\")\n) |&gt;\n  pivot_longer(\n    cols = -state,\n    names_to = \"year\", \n    values_to = \"agi\"\n  )\n\n# A tibble: 9 × 3\n  state   year  agi   \n  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; \n1 Alabama 2006  95067 \n2 Alabama 2016  114510\n3 Alabama 2020  138244\n4 Alaska  2006  17458 \n5 Alaska  2016  23645 \n6 Alaska  2020  26445 \n7 Arizona 2006  146307\n8 Arizona 2016  181691\n9 Arizona 2020  245258\n\n\n\n\n\n\nbind_rows() combines data frames by stacking the rows.\n\none &lt;- tribble(\n  ~id, ~var,\n  \"1\", 3.14,\n  \"2\", 3.15,\n)\n\ntwo &lt;- tribble(\n  ~id, ~var,\n  \"3\", 3.16,\n  \"4\", 3.17,\n)\n\nbind_rows(one, two)\n\n# A tibble: 4 × 2\n  id      var\n  &lt;chr&gt; &lt;dbl&gt;\n1 1      3.14\n2 2      3.15\n3 3      3.16\n4 4      3.17\n\n\nbind_cols() combines data frames by appending columns.\n\nthree &lt;- tribble(\n  ~id, ~var1,\n  \"1\", 3.14,\n  \"2\", 3.15,\n)\n\nfour &lt;- tribble(\n  ~id, ~var2,\n  \"1\", 3.16,\n  \"2\", 3.17,\n)\n\nbind_cols(three, four)\n\nNew names:\n• `id` -&gt; `id...1`\n• `id` -&gt; `id...3`\n\n\n# A tibble: 2 × 4\n  id...1  var1 id...3  var2\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;\n1 1       3.14 1       3.16\n2 2       3.15 2       3.17\n\n\nWhen possible, we recommend using relational joins like left_join() to combine by columns because it is easy to miss-align rows with bind_cols().\n\nleft_join(\n  x = three,\n  y = four,\n  by = \"id\"\n)\n\n# A tibble: 2 × 3\n  id     var1  var2\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 1      3.14  3.16\n2 2      3.15  3.17\n\n\n\n\nTidying Example 3\n\nUntidyCleaned\n\n\nWhy aren’t the data tidy?\n\ntable3_2006 &lt;- tribble(\n  ~state, ~agi,\n  \"Alabama\", \"95067\",\n  \"Alaska\", \"17458\",\n  \"Arizona\", \"146307\"\n)\n\ntable3_2006\n\n# A tibble: 3 × 2\n  state   agi   \n  &lt;chr&gt;   &lt;chr&gt; \n1 Alabama 95067 \n2 Alaska  17458 \n3 Arizona 146307\n\ntable3_2016 &lt;- tribble(\n  ~state, ~agi,\n  \"Alabama\", \"114510\",\n  \"Alaska\", \"23645\",\n  \"Arizona\", \"181691\"\n)\n\ntable3_2016\n\n# A tibble: 3 × 2\n  state   agi   \n  &lt;chr&gt;   &lt;chr&gt; \n1 Alabama 114510\n2 Alaska  23645 \n3 Arizona 181691\n\ntable3_2020 &lt;- tribble(\n  ~state, ~`agi`,\n  \"Alabama\", \"138244\",\n  \"Alaska\", \"26445\",\n  \"Arizona\", \"245258\"\n)\n\ntable3_2020\n\n# A tibble: 3 × 2\n  state   agi   \n  &lt;chr&gt;   &lt;chr&gt; \n1 Alabama 138244\n2 Alaska  26445 \n3 Arizona 245258\n\n\n\n\nThe variable year is contained in the data set names. The .id argument in bind_rows() allows us to create the year variable.\n\ntable3_2006 &lt;- tribble(\n  ~state, ~agi,\n  \"Alabama\", 95067,\n  \"Alaska\", 17458,\n  \"Arizona\", 146307\n)\n\ntable3_2006\n\n# A tibble: 3 × 2\n  state      agi\n  &lt;chr&gt;    &lt;dbl&gt;\n1 Alabama  95067\n2 Alaska   17458\n3 Arizona 146307\n\ntable3_2016 &lt;- tribble(\n  ~state, ~agi,\n  \"Alabama\", 114510,\n  \"Alaska\", 23645,\n  \"Arizona\", 181691\n)\n\ntable3_2016\n\n# A tibble: 3 × 2\n  state      agi\n  &lt;chr&gt;    &lt;dbl&gt;\n1 Alabama 114510\n2 Alaska   23645\n3 Arizona 181691\n\ntable3_2020 &lt;- tribble(\n  ~state, ~`agi`,\n  \"Alabama\", 138244,\n  \"Alaska\", 26445,\n  \"Arizona\", 245258\n)\n\ntable3_2020\n\n# A tibble: 3 × 2\n  state      agi\n  &lt;chr&gt;    &lt;dbl&gt;\n1 Alabama 138244\n2 Alaska   26445\n3 Arizona 245258\n\nbind_rows(\n  `2006` = table3_2006,\n  `2016` = table3_2016,\n  `2020` = table3_2020,\n  .id = \"year\"\n)\n\n# A tibble: 9 × 3\n  year  state      agi\n  &lt;chr&gt; &lt;chr&gt;    &lt;dbl&gt;\n1 2006  Alabama  95067\n2 2006  Alaska   17458\n3 2006  Arizona 146307\n4 2016  Alabama 114510\n5 2016  Alaska   23645\n6 2016  Arizona 181691\n7 2020  Alabama 138244\n8 2020  Alaska   26445\n9 2020  Arizona 245258\n\n\n\n\n\n\nRelational joins are fundamental to working with tidy data. Tidy data can only contain one unit of observation (e.g. county or state not county and state). When data exist on multiple levels, they must be stored in separate tables that can later be combined.\n\n\n\n\n\n\nMutating Joins\n\n\n\nMutating joins add new variables to a data frame by matching observations from one data frame to observations in another data frame.\n\n\n\n\n\n\n\n\nFiltering Joins\n\n\n\nFiltering joins drop observations based on the presence of their key (identifier) in another data frame.\nFor example, we may have a list of students in detention and a list of all students. We can use a filtering join to create a list of student not in detention.\n\n\nFor now, we will focus on mutating joins. Let their be two data frames x and y and let both data frames have a key variable that uniquely identifies rows.\n\nleft_join(x, y) appends variables from y on to x but only keeps observations from x.\nfull_join(x, y) appends variables from y on to x and keeps all observations from x and y.\nanti_join(x, y) returns all observations from x without a match in y. anti_join() is traditionally only used for filtering joins, but it is useful for writing tests for mutating joins.\n\nTo learn more, read the Joins chapter of R for Data Science (2e). library(tidylog) is a useful function for monitoring the behavior of joins.\n\n\nTidying Example 4\n\nUntidyCleaned\n\n\nWhy aren’t the data tidy?\n\ntable4a &lt;- tribble(\n  ~state, ~agi,\n  \"Alabama\", 95067,\n  \"Alaska\", 17458,\n  \"Arizona\", 146307\n)\n\ntable4a\n\n# A tibble: 3 × 2\n  state      agi\n  &lt;chr&gt;    &lt;dbl&gt;\n1 Alabama  95067\n2 Alaska   17458\n3 Arizona 146307\n\ntable4b &lt;- tribble(\n  ~state, ~returns,\n  \"Alabama\", 1929941,\n  \"Alaska\", 322369,\n  \"Arizona\", 2454951\n)\n\ntable4b\n\n# A tibble: 3 × 2\n  state   returns\n  &lt;chr&gt;     &lt;dbl&gt;\n1 Alabama 1929941\n2 Alaska   322369\n3 Arizona 2454951\n\n\n\n\nThese data are tidy! But keeping the data in two separate data frames may not make sense. Let’s use full_join() to combine the data and anti_join() to see if there are mismatches.\n\ntable4a &lt;- tribble(\n  ~state, ~agi,\n  \"Alabama\", 95067,\n  \"Alaska\", 17458,\n  \"Arizona\", 146307\n)\n\ntable4a\n\n# A tibble: 3 × 2\n  state      agi\n  &lt;chr&gt;    &lt;dbl&gt;\n1 Alabama  95067\n2 Alaska   17458\n3 Arizona 146307\n\ntable4b &lt;- tribble(\n  ~state, ~returns,\n  \"Alabama\", 1929941,\n  \"Alaska\", 322369,\n  \"Arizona\", 2454951\n)\n\ntable4b\n\n# A tibble: 3 × 2\n  state   returns\n  &lt;chr&gt;     &lt;dbl&gt;\n1 Alabama 1929941\n2 Alaska   322369\n3 Arizona 2454951\n\nfull_join(table4a, table4b, by = \"state\")\n\n# A tibble: 3 × 3\n  state      agi returns\n  &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n1 Alabama  95067 1929941\n2 Alaska   17458  322369\n3 Arizona 146307 2454951\n\nanti_join(table4a, table4b, by = \"state\")\n\n# A tibble: 0 × 2\n# ℹ 2 variables: state &lt;chr&gt;, agi &lt;dbl&gt;\n\nanti_join(table4b, table4a, by = \"state\")\n\n# A tibble: 0 × 2\n# ℹ 2 variables: state &lt;chr&gt;, returns &lt;dbl&gt;\n\n\n\n\n\n\n\n\n\n\n\nExercise 3\n\n\n\n\nUse pivot_longer() to make the SOI percentile data from the earlier exercise longer. After the transformation, there should be one row per percentile per state.\n\n\n\nTo see more examples, read the tidy data section in R for Data Science (2e)"
  },
  {
    "objectID": "02_advanced-data-cleaning.html#sec-transform",
    "href": "02_advanced-data-cleaning.html#sec-transform",
    "title": "2  Advanced Data Cleaning",
    "section": "2.4 Transform",
    "text": "2.4 Transform\n\n2.4.1 Strings\nCheck out the stringr cheat sheet.\nlibrary(stringr) contains powerful functions for working with strings in R. In data analysis, we may need to detect matches, subset strings, work with the lengths of strings, modify strings, and join and split strings.\n\nDetecting Matches\nstr_detect() is useful for detecting matches in strings, which can be useful with filter(). Consider the executive orders data set and suppose we want to return executive orders that contain the word \"Virginia\".\n\neos &lt;- read_csv(here(\"data\", \"executive-orders.csv\")) |&gt;\n  filter(!is.na(text)) |&gt;\n  group_by(executive_order_number) |&gt;\n  summarize(text = list(text)) |&gt;\n  mutate(text = map_chr(text, ~paste(.x, collapse = \" \")))\n\nRows: 196537 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): text, president\ndbl  (1): executive_order_number\ndate (1): signing_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\neos\n\n# A tibble: 1,126 × 2\n   executive_order_number text                                                  \n                    &lt;dbl&gt; &lt;chr&gt;                                                 \n 1                  12890 \"Executive Order 12890 of December 30, 1993 Amendment…\n 2                  12944 \"Executive Order 12944 of December 28, 1994 Adjustmen…\n 3                  12945 \"Executive Order 12945 of January 20, 1995 Amendment …\n 4                  12946 \"Executive Order 12946 of January 20, 1995 President'…\n 5                  12947 \"Executive Order 12947 of January 23, 1995 Prohibitin…\n 6                  12948 \"Executive Order 12948 of January 30, 1995 Amendment …\n 7                  12949 \"Executive Order 12949 of February 9, 1995 Foreign In…\n 8                  12950 \"Executive Order 12950 of February 22, 1995 Establish…\n 9                  12951 \"Executive Order 12951 of February 22, 1995 Release o…\n10                  12952 \"Executive Order 12952 of February 24, 1995 Amendment…\n# ℹ 1,116 more rows\n\neos |&gt;\n  filter(str_detect(string = text, pattern = \"Virginia\"))\n\n# A tibble: 6 × 2\n  executive_order_number text                                                   \n                   &lt;dbl&gt; &lt;chr&gt;                                                  \n1                  13150 Executive Order 13150 of April 21, 2000 Federal Workfo…\n2                  13508 Executive Order 13508 of May 12, 2009 Chesapeake Bay P…\n3                  13557 Executive Order 13557 of November 4, 2010 Providing an…\n4                  13775 Executive Order 13775 of February 9, 2017 Providing an…\n5                  13787 Executive Order 13787 of March 31, 2017 Providing an O…\n6                  13934 Executive Order 13934 of July 3, 2020 Building and Reb…\n\n\n\n\nSubsetting Strings\nstr_sub() can subset strings based on positions within the string. Consider an example where we want to extract state FIPS codes from county FIPS codes.\n\ntibble(fips = c(\"01001\", \"02013\", \"04001\")) |&gt;\n  mutate(state_fips = str_sub(fips, start = 1, end = 2))\n\n# A tibble: 3 × 2\n  fips  state_fips\n  &lt;chr&gt; &lt;chr&gt;     \n1 01001 01        \n2 02013 02        \n3 04001 04        \n\n\n\n\nManaging Lengths\nstr_pad() is useful for managing lengths. Consider the common situation when zeros are dropped from the beginning of FIPS codes.\n\ntibble(fips = c(1, 2, 4)) |&gt;\n  mutate(fips = str_pad(fips, side = \"left\", pad = \"0\", width = 2))\n\n# A tibble: 3 × 1\n  fips \n  &lt;chr&gt;\n1 01   \n2 02   \n3 04   \n\n\n\n\nModifying Strings\nstr_replace(), str_replace_all(), str_remove(), and str_remove_all() can delete or modify parts of strings. Consider an example where we have course names and we want to delete everything except numeric digits.2\n\ntibble(course = c(\"PPOL 670\", \"GOVT 8009\", \"PPOL 6819\")) |&gt;\n  mutate(course = str_remove(course, pattern = \"[:alpha:]*\\\\s\"))\n\n# A tibble: 3 × 1\n  course\n  &lt;chr&gt; \n1 670   \n2 8009  \n3 6819  \n\n\nstr_c() and str_glue() are useful for joining strings. Consider an example where we want to “fill in the blank” with a variable in a data frame.\n\ntibble(fruit = c(\"apple\", \"banana\", \"cantelope\")) |&gt;\n  mutate(sentence = str_glue(\"my favorite fruit is {fruit}\"))\n\n# A tibble: 3 × 2\n  fruit     sentence                      \n  &lt;chr&gt;     &lt;glue&gt;                        \n1 apple     my favorite fruit is apple    \n2 banana    my favorite fruit is banana   \n3 cantelope my favorite fruit is cantelope\n\n\n\ntibble(fruit = c(\"apple\", \"banana\", \"cantelope\")) |&gt;\n  mutate(\n    another_sentence = \n      str_c(\"Who doesn't like a good \", fruit, \".\")\n    )\n\n# A tibble: 3 × 2\n  fruit     another_sentence                  \n  &lt;chr&gt;     &lt;chr&gt;                             \n1 apple     Who doesn't like a good apple.    \n2 banana    Who doesn't like a good banana.   \n3 cantelope Who doesn't like a good cantelope.\n\n\nThis workflow is useful for building up URLs when accessing APIs, scraping information from the Internet, and downloading many files.\n\n\n\n\n\n\nExercise 4\n\n\n\n\nUse mutate() and library(stringr) to create a variable for year from the earlier SOI exercise. For instance, \"agi2006\" should be \"2006\".\nUse as.numeric() to convert the string from step 1 into a numeric value.\nCreate a data visualization with year on the x-axis.\n\n\n\n\n\n\n2.4.2 Factors\nCheck out the forcats cheat sheet.\nMuch of our work focuses on four of the six types of atomic vectors: logical, integer, double, and character. R also contains augmented vectors like factors.\nFactors are categorical data stored as integers with a levels attribute. Character vectors often work well for categorical data and many of R’s functions convert character vectors to factors. This happens with lm().\nFactors have many applications:\n\nGiving the levels of a categorical variable non-alpha numeric order in a ggplot2 data visualization.\nRunning calculations on data with empty groups.\nRepresenting categorical outcome variables in classification models.\n\n\nFactor Basics\n\nx1 &lt;- factor(c(\"a\", \"a\", \"b\", \"c\"), levels = c(\"d\", \"c\", \"b\", \"a\"))\n\nx1\n\n[1] a a b c\nLevels: d c b a\n\nattributes(x1)\n\n$levels\n[1] \"d\" \"c\" \"b\" \"a\"\n\n$class\n[1] \"factor\"\n\nlevels(x1)\n\n[1] \"d\" \"c\" \"b\" \"a\"\n\n\nx1 has order but it isn’t ordinal. Sometimes we’ll come across ordinal factor variables, like with the diamonds data set. Unintentional ordinal variables can cause unexpected errors. For example, including ordinal data as predictors in regression models will lead to different estimated coefficients than other variable types.\n\nglimpse(diamonds)\n\nRows: 53,940\nColumns: 10\n$ carat   &lt;dbl&gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     &lt;ord&gt; Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   &lt;ord&gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity &lt;ord&gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   &lt;dbl&gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   &lt;dbl&gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   &lt;int&gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       &lt;dbl&gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       &lt;dbl&gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       &lt;dbl&gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n\n\n\nx2 &lt;- factor(\n  c(\"a\", \"a\", \"b\", \"c\"), \n  levels = c(\"d\", \"c\", \"b\", \"a\"),\n  ordered = TRUE\n)\n\nx2\n\n[1] a a b c\nLevels: d &lt; c &lt; b &lt; a\n\nattributes(x2)\n\n$levels\n[1] \"d\" \"c\" \"b\" \"a\"\n\n$class\n[1] \"ordered\" \"factor\" \n\nlevels(x2)\n\n[1] \"d\" \"c\" \"b\" \"a\"\n\n\nFigure 2.1 shows how we can use a factor to give a variable a non-alpha numeric order and preserve empty levels. In this case, February and March have zero tropical depressions, tropical storms, and hurricanes and we want to demonstrate that emptiness.\n\n# use case_match to convert integers into month names\nstorms &lt;- storms |&gt;\n  mutate(\n    month = case_match(\n      month,\n      1 ~ \"Jan\",\n      4 ~ \"Apr\",\n      5 ~ \"May\",\n      6 ~ \"Jun\",\n      7 ~ \"Jul\",\n      8 ~ \"Aug\",\n      9 ~ \"Sep\",\n      10 ~ \"Oct\",\n      11 ~ \"Nov\",\n      12 ~ \"Dec\"\n    )\n  )\n\n# create data viz without factors\nstorms |&gt;\n  count(month) |&gt;\n  ggplot(aes(x = n, y = month)) +\n  geom_col()\n\n# add factor variable\nmonths &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n            \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n\nstorms &lt;- storms |&gt;\n  mutate(month = factor(month, levels = months)) \n\n# create data viz with factors\nstorms |&gt;\n  count(month, .drop = FALSE) |&gt;\n  ggplot(aes(x = n, y = month)) +\n  geom_col()\n\n\n\n\n\n\n\n(a) Figure without a factor\n\n\n\n\n\n\n\n(b) Figure with a factor\n\n\n\n\nFigure 2.1: Hurricane Season Peaks in Late Summer and Early Fall\n\n\n\nFactors also change the behavior of summary functions like count().\n\nstorms |&gt;\n  count(month)\n\n# A tibble: 10 × 2\n   month     n\n   &lt;fct&gt; &lt;int&gt;\n 1 Jan      70\n 2 Apr      66\n 3 May     201\n 4 Jun     779\n 5 Jul    1603\n 6 Aug    4440\n 7 Sep    7509\n 8 Oct    3077\n 9 Nov    1109\n10 Dec     212\n\nstorms |&gt;\n  count(month, .drop = FALSE)\n\n# A tibble: 12 × 2\n   month     n\n   &lt;fct&gt; &lt;int&gt;\n 1 Jan      70\n 2 Feb       0\n 3 Mar       0\n 4 Apr      66\n 5 May     201\n 6 Jun     779\n 7 Jul    1603\n 8 Aug    4440\n 9 Sep    7509\n10 Oct    3077\n11 Nov    1109\n12 Dec     212\n\n\nlibrary(forcats) simplifies many common operations on factor vectors.\n\n\nChanging Order\nfct_relevel(), fct_rev(), and fct_reorder() are useful functions for modifying the order of factor variables. Figure 2.2 demonstrates using fct_rev() to flip the order of a categorical axis in ggplot2.\n\nstorms |&gt;\n  count(month, .drop = FALSE) |&gt;\n  ggplot(aes(x = n, y = month)) +\n  geom_col()\n\nstorms |&gt;\n  mutate(month = fct_rev(month)) |&gt;\n  count(month, .drop = FALSE) |&gt;\n  ggplot(aes(x = n, y = month)) +\n  geom_col()\n\n\n\n\n\n\n\n(a) Descending\n\n\n\n\n\n\n\n(b) Ascending\n\n\n\n\nFigure 2.2: Hurricane Season Peaks in Late Summer and Early Fall\n\n\n\nFigure 2.3 orders the factor variable based on the number of observations in each category using fct_reorder(). fct_reorder() can order variables based on more sophisticated summaries than just magnitude. For example, it can order box-and-whisker plots based on the median or even something as arbitrary at the 60th percentile.\n\nstorms |&gt;\n  count(month, .drop = FALSE) |&gt;\n  ggplot(aes(x = n, y = month)) +\n  geom_col()\n\nstorms |&gt;\n  count(month, .drop = FALSE) |&gt;\n  mutate(month = fct_reorder(.f = month, .x = n, .fun = median)) |&gt;\n  ggplot(aes(x = n, y = month)) +\n  geom_col()\n\n\n\n\n\n\n\n(a) Alpha-numeric\n\n\n\n\n\n\n\n(b) Magnitude\n\n\n\n\nFigure 2.3: Hurricane Season Peaks in Late Summer and Early Fall\n\n\n\n\n\nChanging Values\nFunctions like fct_recode() and fct_lump_min() are useful for changing factor variables. Figure 2.4 combines categories with fewer than 1,000 observations into an \"Other\" group.\n\nstorms |&gt;\n  count(month, .drop = FALSE) |&gt;\n  ggplot(aes(x = n, y = month)) +\n  geom_col()\n\nstorms |&gt;\n  mutate(month = fct_lump_min(month, min = 1000)) |&gt;  \n  count(month, .drop = FALSE) |&gt;\n  ggplot(aes(x = n, y = month)) +\n  geom_col()\n\n\n\n\n\n\n\n(a) All\n\n\n\n\n\n\n\n(b) Lumped\n\n\n\n\nFigure 2.4: Hurricane Season Peaks in Late Summer and Early Fall\n\n\n\n\n\n\n2.4.3 Dates and Date-Times\nCheck out the lubridate cheat sheet.\nThere are many ways to store dates.\n\nMarch 14, 1992\n03/14/1992\n14/03/1992\n14th of March ’92\n\nOne way of storing dates is the best. The ISO 8601 date format is an international standard with appealing properties like fixed lengths and self ordering. The format is YYYY-MM-DD.\nlibrary(lubridate) has useful functions that will take dates of any format and convert them to the ISO 8601 standard.\n\nlibrary(lubridate)\n\nmdy(\"March 14, 1992\")\n\n[1] \"1992-03-14\"\n\nmdy(\"03/14/1992\")\n\n[1] \"1992-03-14\"\n\ndmy(\"14/03/1992\")\n\n[1] \"1992-03-14\"\n\ndmy(\"14th of March '92\")\n\n[1] \"1992-03-14\"\n\n\nThese functions return variables of class \"Date\".\n\nclass(mdy(\"March 14, 1992\"))\n\n[1] \"Date\"\n\n\nlibrary(lubridate) also contains functions for parsing date times into ISO 8601 standard. Times are slightly trickier because of time zones.\n\nmdy_hms(\"12/02/2021 1:00:00\")\n\n[1] \"2021-12-02 01:00:00 UTC\"\n\nmdy_hms(\"12/02/2021 1:00:00\", tz = \"EST\")\n\n[1] \"2021-12-02 01:00:00 EST\"\n\nmdy_hms(\"12/02/2021 1:00:00\", tz = \"America/Chicago\")\n\n[1] \"2021-12-02 01:00:00 CST\"\n\n\nBy default, library(lubridate) will put the date times in Coordinated Universal Time (UTC), which is the successor to Greenwich Mean Time (GMT). I recommend carefully reading the data dictionary if time zones are important for your analysis or if your data cross time zones. This is especially important during time changes (e.g. “spring forward” and “fall back”).\nFortunately, if you encode your dates or date-times correctly, then library(lubridate) will automatically account for time changes, time zones, leap years, leap seconds, and all of the quirks of dates and times.\n\n\n\n\n\n\nExercise 5\n\n\n\n\ndates &lt;- tribble(\n  ~date,\n  \"12/01/1987\",\n  \"12/02/1987\",\n  \"12/03/1987\"\n)\n\n\nCreate the dates data from above with tribble().\nUse mutate() to convert the date column to the ISO 8601 standard.\n\n\n\n\nExtracting Components\nlibrary(lubridate) contains functions for extracting components from dates like the year, month, day, and weekday. Conisder the follow data set about full moons in Washington, DC in 2023.\n\nfull_moons &lt;- tribble(\n  ~full_moon,\n  \"2023-01-06\",\n  \"2023-02-05\",\n  \"2023-03-07\",\n  \"2023-04-06\",\n  \"2023-05-05\",\n  \"2023-06-03\",\n  \"2023-07-03\",\n  \"2023-08-01\",\n  \"2023-08-30\",\n  \"2023-09-29\",\n  \"2023-10-28\",\n  \"2023-11-27\",\n  \"2023-12-26\"\n) |&gt;\n  mutate(full_moon = as_date(full_moon))\n\nSuppose we want to know the weekday of each full moon.\n\nfull_moons |&gt;\n  mutate(week_day = wday(full_moon, label = TRUE))\n\n# A tibble: 13 × 2\n   full_moon  week_day\n   &lt;date&gt;     &lt;ord&gt;   \n 1 2023-01-06 Fri     \n 2 2023-02-05 Sun     \n 3 2023-03-07 Tue     \n 4 2023-04-06 Thu     \n 5 2023-05-05 Fri     \n 6 2023-06-03 Sat     \n 7 2023-07-03 Mon     \n 8 2023-08-01 Tue     \n 9 2023-08-30 Wed     \n10 2023-09-29 Fri     \n11 2023-10-28 Sat     \n12 2023-11-27 Mon     \n13 2023-12-26 Tue     \n\n\n\n\nMath\nlibrary(lubridate) easily handles math with dates and date-times. Suppose we want to calculate the number of days since American Independence Day:\n\ntoday() - as_date(\"1776-07-04\")\n\nTime difference of 90268 days\n\n\nIn this case, subtraction creates an object of class difftime represented in days. We can use the difftimes() function to calculate differences in other units.\n\ndifftime(today(), as_date(\"1776-07-04\"), units = \"mins\")\n\nTime difference of 129985920 mins\n\n\n\n\nPeriods\nPeriods track clock time or a calendar time. We use periods when we set a recurring meetings on a calendar and when we set an alarm to wake up in the morning.\nThis can lead to some interesting results. Do we always add 365 days when we add 1 year to a date? With periods, this isn’t true. Sometimes we add 366 days during leap years. For example,\n\nstart &lt;- as_date(\"1999-03-14\")\nend &lt;- start + years(1)\n\nend\n\n[1] \"2000-03-14\"\n\nend - start\n\nTime difference of 366 days\n\n\n\n\nDurations\nDurations track the passage of physical time in exact seconds. Durations are like sand falling into an hourglass. Duration functions start with d like dyears() and dminutes().\n\nstart &lt;- as_date(\"1999-03-14\")\nend &lt;- start + dyears(1)\n\nend\n\n[1] \"2000-03-13 06:00:00 UTC\"\n\n\nNow we always add 365 days, but we see that March 13th is one year after March 14th.\n\n\nIntervals\nUntil now, we’ve focused on points in time. Intervals have length and have a starting point and an ending point.\nSuppose classes start on August 23rd and proceed every week for a while. Do any of these dates conflict with Georgetown’s fall break?\n\nclasses &lt;- as_date(\"2023-08-23\") + weeks(0:15)\n\nfall_break &lt;- interval(as_date(\"2023-11-22\"), as_date(\"2023-11-26\"))\n\nclasses %within% fall_break\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE  TRUE FALSE FALSE\n\n\nWe focused on dates, but many of the same principles hold for date-times.\n\n\n\n\n\n\nExercise 6\n\n\n\n\nCreate a date object for your birth date.\nCalculate the number of days since your birth date.\nCreate a vector of your birthdays from your birth date for the next 120 years. Do you use periods or durations?\n\n\n\n\n\n\n2.4.4 Missing Data\nMissing data are ever present in data analysis. R stores missing values as NA, which are contagious and are fortunately difficult to ignore.\nreplace_na() is the quickest function to replace missing values. It is a shortcut for a specific instance of if_else().\n\nx &lt;- c(1, NA, 3)\n\nif_else(condition = is.na(x), true = 2, false = x)\n\n[1] 1 2 3\n\nreplace_na(x, replace = 2)\n\n[1] 1 2 3\n\n\nWe recommend avoiding arguments like na.rm and using filter() for structurally missing values and replace_na() or imputation for nonresponse.\n\n\n\n\n\n\nExercise 7\n\n\n\nLet’s focus on different data shared by SOI. Now we’ll focus on individual income and tax data by state.\nThis Excel workbook is a beast. For instance, it isn’t clear how the hierarchy works. I expected all of the rows nested under “Number of returns” to sum up to the number of returns. Unfortunately, the rows are not disjoint. Also, the merged cells for column headers are very difficult to use with programming languages.\n\nStart with 20in01al.xlsx.\nCreate a tidy data frame with rows 10 through 12 (“Number of single returns”, “Number of joint returns”, and “Number of head of household returns”) disaggregated by “size of adjusted gross income”."
  },
  {
    "objectID": "02_advanced-data-cleaning.html#footnotes",
    "href": "02_advanced-data-cleaning.html#footnotes",
    "title": "2  Advanced Data Cleaning",
    "section": "",
    "text": "The instinct to include these comments is good. The execution is poor because it creates big headaches for people using programming languages. I suggest using a data dictionary instead.↩︎\nThis example uses regular expressions (regex). Visit R4DS (2e) for a review of regex.↩︎"
  },
  {
    "objectID": "03_functions.html#sec-review3",
    "href": "03_functions.html#sec-review3",
    "title": "3  Advanced R Programming",
    "section": "3.1 Review",
    "text": "3.1 Review\n\n3.1.1 Relational Data\nWe’ve almost exclusively used data frames up to this point. We leveraged relations within our data to pick subsets of the data with functions like filter().\n\nlibrary(tidyverse)\n\nmsleep |&gt; \n  filter(name == \"Cow\")\n\n# A tibble: 1 × 11\n  name  genus vore  order   conservation sleep_total sleep_rem sleep_cycle awake\n  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1 Cow   Bos   herbi Artiod… domesticated           4       0.7       0.667    20\n# ℹ 2 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt;\n\n\nImportantly, we almost never used indices or selected data by position, which can lead to errors if the underlying data change. An example of using indices and selecting data by position would be to pick data from row number 5 and column number 4. This idea of using the relations in data reduces the chances of making mistakes and leads to clearer code."
  },
  {
    "objectID": "03_functions.html#programming",
    "href": "03_functions.html#programming",
    "title": "3  Advanced R Programming",
    "section": "3.2 Programming",
    "text": "3.2 Programming\n\n3.2.1 Selecting Data\nThere are other ways to subset data, which are important when working with objects other than data frames. We will focus on [], [[]], and $.\n\nAtomic Vectors\nMuch of our work focuses on four of the six types of atomic vectors: logical, integer, double, and character. [] is useful for subsetting atomic vectors. Consider a vector with the first six letters of the alphabet:\n\nletters_short &lt;- letters[1:6]\n\nWe can use positive integers to subset to the first and fifth letters of the alphabet.\n\nletters_short[c(1, 5)]\n\n[1] \"a\" \"e\"\n\n\nWe can use negative integers to subset to the everything but the first and fifth letters of the alphabet.\n\nletters_short[c(-1, -5)]\n\n[1] \"b\" \"c\" \"d\" \"f\"\n\n\nWe can use Booleans (trues and falses) to subset to the first and fifth letters of the alphabet.\n\nletters_short[c(TRUE, FALSE, FALSE, FALSE, TRUE, FALSE)]\n\n[1] \"a\" \"e\"\n\n\nThis may seem silly, but we have many ways to create Booleans that we can then use to subset a vector.\n\nbooleans &lt;- letters_short %in% c(\"a\", \"e\")\n\nbooleans\n\n[1]  TRUE FALSE FALSE FALSE  TRUE FALSE\n\nletters_short[booleans]\n\n[1] \"a\" \"e\"\n\n\nWe can use a character vector to subset a named vector.\n\nnamed_vector &lt;- c(a = 1, b = 2, c = 3)\n\nnamed_vector\n\na b c \n1 2 3 \n\nnamed_vector[c(\"a\", \"c\")]\n\na c \n1 3 \n\n\nWe are able to select more than one element with [], which will not be true of [[]] and $. One thing to look out for is vector recycling. Let’s go back to letters_short, which is length six, but consider some indices of varying lengths.\n\nletters_short[TRUE]\n\n[1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"\n\nletters_short[c(TRUE, FALSE)]\n\n[1] \"a\" \"c\" \"e\"\n\nletters_short[c(TRUE, FALSE, TRUE)]\n\n[1] \"a\" \"c\" \"d\" \"f\"\n\n\n\n\n\n\n\n\nCaution\n\n\n\nWow, R recycles the Booleans. Six is divisible by 1, 2, and 3, so there are many ways to recycle the index to subset letters_short. This is dangerous and can quietly cause analtyic errors.\n\n\n\n\n\n\n\n\nExercise 1\n\n\n\n\nCreate letters_short.\nTry subsetting the vectors with indices with length four or five. What happens?\n\n\n\n\n\nLists\n[[]] and $ are useful for subsetting lists. Both can be used to subset data frames, but I recommending avoiding this.\nUnlike [], which returns multiple elements, [[]] and $ can only return a single element and [[]] and $ simplify objects by removing a layer of hierarchy.\n[[]] can select an element by position or name, while $ can only select an element by name. Consider a list with the first six letters of the alphabet.\n\nalphabet &lt;- list(\n  vowels = c(\"a\", \"e\"),\n  consonants = c(\"b\", \"c\", \"d\", \"f\")\n)\n\nWe can use [] to select the first or second element. In both cases, we get back a smaller list.\n\nalphabet[1]\n\n$vowels\n[1] \"a\" \"e\"\n\nclass(alphabet[1])\n\n[1] \"list\"\n\nalphabet[2]\n\n$consonants\n[1] \"b\" \"c\" \"d\" \"f\"\n\nclass(alphabet[2])\n\n[1] \"list\"\n\n\nWe can use [[]] to select the first or second element. Now, we get back a vector instead of a list. [[]] simplified the object by removing a level of hierarchy.\n\nalphabet[[1]]\n\n[1] \"a\" \"e\"\n\nclass(alphabet[[1]])\n\n[1] \"character\"\n\n\nWe can also use [[]] to select an object by name.\n\nalphabet[[\"vowels\"]]\n\n[1] \"a\" \"e\"\n\nclass(alphabet[[\"vowels\"]])\n\n[1] \"character\"\n\n\nWe can use $ to select either vector by name.\n\nalphabet$vowels\n\n[1] \"a\" \"e\"\n\nclass(alphabet$vowels)\n\n[1] \"character\"\n\n\nReferring to objects by name should make for code that is more robust to changing data.\n\nBeforeAfter\n\n\n\nalphabet1 &lt;- list(\n  vowels = c(\"a\", \"e\"),\n  consonants = c(\"b\", \"c\", \"d\", \"f\")\n)\n\nalphabet1[[2]]\n\n[1] \"b\" \"c\" \"d\" \"f\"\n\nalphabet1[[\"consonants\"]]\n\n[1] \"b\" \"c\" \"d\" \"f\"\n\n\n\n\n\nalphabet2 &lt;- list(\n  vowels = c(\"a\", \"e\"),\n  confusing = \"y\",\n  consonants = c(\"b\", \"c\", \"d\", \"f\")\n)\n\nalphabet2[[2]]\n\n[1] \"y\"\n\nalphabet2[[\"consonants\"]]\n\n[1] \"b\" \"c\" \"d\" \"f\"\n\n\n\n\n\nSubsetting lists can be difficult. Fortunately, RStudio has a tool than can help. Click on a list in your global environment. Navigate to the far right and click the list button with a green arrow. This will generate code and add it to the Console.\n\nInterestingly, this tool avoids $ and uses [[]] to pick the vector by name.\n\nalphabet[[\"vowels\"]]\n\n[1] \"a\" \"e\"\n\n\n\n\n\n3.2.2 Control Flow\n\nFor Loops\nLoops are a fundamental programming tool for iteration; however, they are less common in R than in other programming languages. We previously focused on the Map-Reduce framework and library(purrr) instead of for loops for iteration.\nFor loops have two main pieces: 1. a header and 2. a body. Headers define the number of iterations and potential inputs to the iteration. Bodies are iterated once per iteration. Here is a very simple example:\n\nfor (i in 1:10) {\n  \n  print(i)\n  \n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n\n\nWe can use headers several different ways. Like above, we may just want to repeat the values in the index.\n\nfruit &lt;- c(\"apple\", \"banana\", \"cantelope\")\nfor (b in fruit) {\n  \n  print(b)\n  \n}\n\n[1] \"apple\"\n[1] \"banana\"\n[1] \"cantelope\"\n\n\nWe can use the header as an index.\n\nfruit &lt;- c(\"apple\", \"banana\", \"cantelope\")\nfor (i in 1:3) {\n  \n  print(fruit[i])\n  \n}\n\n[1] \"apple\"\n[1] \"banana\"\n[1] \"cantelope\"\n\n\nWe can leverage the index to use results from previous iterations.\n\nresult &lt;- c(1, NA, NA, NA) \nfor (i in 2:4) {\n  \n  result[i] &lt;- result[i - 1] * 2\n  \n}\n\nresult\n\n[1] 1 2 4 8\n\n\nWe’ve now seen three different ways to use the header.\n\nSimply repeat the elements in the header (e.g. print i).\nUse the elements in the header as an index (e.g. select the \\(i^{th}\\) element).\nUse the header to reference past iterations (e.g. i - 1)\n\n\n\n\n\n\n\nDon’t grow vectors!\n\n\n\nIt is tempting to initialize a vector and then grow the vector with a for loop and c(). It is also tempting to initialize a data frame and then grow the data frame with bind_rows(). Because of R’s design, this is computationally very inefficient.\nThis is slow!:\n\nvec &lt;- c(1)\n\nfor (i in 2:10) {\n  \n  vec &lt;- c(vec, i)\n  \n  \n}\n\nvec\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\n\nIt is essential to pre-allocate vectors and then fill them in. It is also easy to make mistakes when creating indices (e.g. 1:length(x) may end up as c(1, 0)). seq_along() is a helpful alternative to :. The following pre-allocates a vector and then uses the length of the vector to create an index.\n\nnumbers &lt;- vector(mode = \"numeric\", length = 5)\n\nnumbers\n\n[1] 0 0 0 0 0\n\nfor (i in seq_along(numbers)) {\n  \n  numbers[i] &lt;- i\n  \n}\n\nnumbers\n\n[1] 1 2 3 4 5\n\n\nLet’s consider a simple random walk with 100 steps. In this case, the person starts at location zero and random takes one step forward or one step back.\n\nposition &lt;- vector(mode = \"numeric\", length = 100)\n\nset.seed(20230530)\nfor (iter in 2:length(position)) {\n  \n  position[iter] &lt;- position[iter - 1] + sample(x = c(-1, 1), size = 1)\n  \n  \n}\n\nposition\n\n  [1]  0 -1  0  1  2  1  0  1  0  1  2  1  0  1  2  1  2  1  2  1  2  1  2  1  2\n [26]  3  4  5  4  3  2  3  4  3  4  3  2  3  2  3  2  3  2  3  2  3  2  1  2  3\n [51]  2  3  4  3  4  5  6  5  6  5  6  7  6  5  6  7  8  9 10 11 12 13 12 13 12\n [76] 11 10  9 10  9  8  9 10 11 12 13 12 11 12 11 12 13 12 13 14 15 14 15 14 15\n\n\n\n\n\n\n\n\nExercise 2\n\n\n\n\nCreate the following list:\n\n\nalphabet &lt;- list(\n  vowels = c(\"a\", \"e\"),\n  confusing = \"y\",\n  consonants = c(\"b\", \"c\", \"d\", \"f\")\n)\n\n\nWrite a for loop and use str_to_upper() to transform all letters to upper case.\n\n\n\n\n\nWhile Loops\nWhile loops are similar to for loops; however, instead of predetermining the number of iterations in the header, while loops determine a condition in the header and run until that condition is met. For loops can be rewritten as while loops. It can be useful to track the iteration number. Consider a simple example where we double x every iteration while x &lt; 1000.\n\niteration &lt;- 1\nx &lt;- 2\n\nwhile (x &lt; 1000) {\n  \n  x &lt;- x * 2\n  iteration &lt;- iteration + 1\n  \n}\n\nx \n\n[1] 1024\n\niteration\n\n[1] 10\n\n\n\n\n\n\n\n\nExercise 3\n\n\n\n\nWrite the random walk from the for loop above as a while loop. Stop the while loop when position &lt; -10 or position &gt; 10. How many iterations did it take?\n\n\n\n\n\nif, else, and else if\nif_else() and case_when() apply conditional logic to a vector. We most frequently use those functions inside of mutate() to create a new variable or manipulate an existing variable.\nR also has if, else, and else if, which are used to select sections of code to run. This is incredibly useful when programming outside of data manipulation. For example, we can use if to download a file only if it doesn’t already exist.\n\nif (!file.exists(\"data.csv\")) {\n\n  download.file(url = \"web-url.csv\", destfile = \"data.csv\")\n\n}\n\nSelection control flow has two important pieces. First, there is a conditional statement inside (). If the condition is TRUE, then evaluate. If it is FALSE, then don’t evaluate. Second, there is a body contained in {}. Note the formatting in the above example.\nThe conditional statement must be a single TRUE or FALSE. If your statement involves more than one Boolean, then consider using all(), which evaluates to TRUE if everything is TRUE and any(), which evaluates to TRUE if anay element is TRUE.\nLet’s consider a more sophisticated example.\n\nif (distribution == \"normal\") {\n  \n  x &lt;- rnorm(n = 100)\n  \n} else if (distribution == \"poisson\") {\n  \n  x &lt;- rpois(n = 100, lambda = 8)\n  \n} else {\n  \n  stop(\"distribution mast be normal or poissoin\")\n  \n}\n\nThis style of using if, else if, and else is fundamental for including options in custom functions."
  },
  {
    "objectID": "03_functions.html#custom-functions",
    "href": "03_functions.html#custom-functions",
    "title": "3  Advanced R Programming",
    "section": "3.3 Custom Functions",
    "text": "3.3 Custom Functions\n\n3.3.1 Motivation\nCustom functions are an essential building block for good analyses. Custom functions are useful for abiding by the DRY (don’t repeat yourself) principle. Under our conception of DRY, we should create a function any time we do something three times.\nCopying-and-pasting is typically bad because it is easy to make mistakes and we typically want a single source source of truth in a script. Custom functions also promote modular code design and testing.\nThe bottom line: we want to write clear functions that do one and only one thing that are sufficiently tested so we are confident in their correctness.\n\n\n3.3.2 Examples\nLet’s consider a couple of examples from (Barrientos et al. 2021). This paper is a large-scale simulation of formally private mechanisms, which relates to several future chapters of this book.\nDivision by zero, which returns NaN, can be a real pain when comparing confidential and noisy results when the confidential value is zero. This function simply returns 0 when the denominator is 0.\n\n#' Safely divide number. When zero is in the denominator, return 0. \n#'\n#' @param numerator A numeric value for the numerator\n#' @param denominator A numeric value for the denominator\n#'\n#' @return A numeric ratio\n#'\nsafe_divide &lt;- function(numerator, denominator) {\n  \n  if (den == 0) {\n    \n    return(0)\n    \n  } else {\n    \n    return(num / denom)\n    \n  }\n}\n\nThis function\n\nImplements the laplace or double exponential distribution, which isn’t included in base R.\nApplies a technique called the laplace mechanism.\n\n\n#' Apply the laplace mechanism\n#'\n#' @param eps Numeric epsilon privacy parameter\n#' @param gs Numeric global sensitivity for the statistics of interest\n#'\n#' @return\n#' \nlap_mech &lt;- function(eps, gs) {\n  \n  # Checking for proper values\n  if (any(eps &lt;= 0)) {\n    stop(\"The eps must be positive.\")\n  }\n  if (any(gs &lt;= 0)) {\n    stop(\"The GS must be positive.\")\n  }\n  \n  # Calculating the scale\n  scale &lt;- gs / eps\n\n  r &lt;- runif(1)\n\n  if(r &gt; 0.5) {\n    r2 &lt;- 1 - r\n    x &lt;- 0 - sign(r - 0.5) * scale * log(2 * r2)\n  } else {\n    x &lt;- 0 - sign(r - 0.5) * scale * log(2 * r)\n  }\n  \n  return(x)\n}\n\n\n\n3.3.3 Basics\nR has a robust system for creating custom functions. To create a custom function, use function():\n\nsay_hello &lt;- function() {\n  \n  \"hello\"\n   \n}\n\nsay_hello()\n\n[1] \"hello\"\n\n\nOftentimes, we want to pass parameters/arguments to our functions:\n\nsay_hello &lt;- function(name) {\n  \n  paste(\"hello,\", name)\n   \n}\n\nsay_hello(name = \"aaron\")\n\n[1] \"hello, aaron\"\n\n\nWe can also specify default values for parameters/arguments:\n\nsay_hello &lt;- function(name = \"aaron\") {\n  \n  paste(\"hello,\", name)\n   \n}\n\nsay_hello()\n\n[1] \"hello, aaron\"\n\nsay_hello(name = \"alex\")\n\n[1] \"hello, alex\"\n\n\nsay_hello() just prints something to the console. More often, we want to perform a bunch of operations and the then return some object like a vector or a data frame. By default, R will return the last unassigned object in a custom function. It isn’t required, but it is good practice to wrap the object to return in return().\nIt’s also good practice to document functions. With your cursor inside of a function, go Insert &gt; Insert Roxygen Skeleton:\n\n#' Say hello\n#'\n#' @param name A character vector with names\n#'\n#' @return A character vector with greetings to name\n#' \nsay_hello &lt;- function(name = \"aaron\") {\n  \n  greeting &lt;- paste(\"hello,\", name)\n  \n  return(greeting)\n  \n}\n\nsay_hello()\n\n[1] \"hello, aaron\"\n\n\nAs you can see from the Roxygen Skeleton template above, function documentation should contain the following:\n\nA description of what the function does\nA description of each function argument, including the class of the argument (e.g. string, integer, dataframe)\nA description of what the function returns, including the class of the object\n\nTips for writing functions:\n\nFunction names should be short but effectively describe what the function does. Function names should generally be verbs while function arguments should be nouns. See the Tidyverse style guide for more details on function naming and style.\nAs a general principle, functions should each do only one task. This makes it much easier to debug your code and reuse functions!\nUse :: (e.g. dplyr::filter()) when writing custom functions. This will create stabler code and make it easier to develop R packages.\n\n\n\n3.3.4 Functions with Multiple Outputs\nWhen return() is reached in a function, return() is evaluated and evaluation ends and R leaves the function.\n\nsow_return &lt;- function() {\n  \n  return(\"The function stops!\")\n  \n  return(\"This never happens!\")\n  \n}\n\nsow_return()\n\n[1] \"The function stops!\"\n\n\nIf the end of a function is reached without calling return(), the value from the last evaluated expression is returned.\nWe prefer to include return() at the end of functions for clarity even though return() doesn’t change the behavior of the function.\nSometimes we want to return more than one vector or data frame. list() is very helpful in these siutations.\n\nsummarize_results &lt;- function(x) {\n  \n  mean_x &lt;- mean(x)\n  \n  median_x &lt;- median(x)\n  \n  results &lt;- list(\n    mean = mean_x,\n    median = median_x\n  )\n  \n  return(results)\n  \n}\n\nsummarize_results(x = 1:10)\n\n$mean\n[1] 5.5\n\n$median\n[1] 5.5\n\n\n\n\n3.3.5 Referential Transparency\nR functions, like mathematical functions, should always return the exact same output for a given set of inputs1. This is called referential transparency. R will not enforce this idea, so you must write good code.\n\nBad!\n\nbad_function &lt;- function(x) {\n  \n  x * y\n  \n}\n\ny &lt;- 2\nbad_function(x = 2)\n\n[1] 4\n\ny &lt;- 3\nbad_function(x = 2)\n\n[1] 6\n\n\n\n\nGood!\n\ngood_function &lt;- function(x, y) {\n  \n  x * y\n  \n}\n  \ny &lt;- 2\ngood_function(x = 2, y = 1)\n\n[1] 2\n\ny &lt;- 3\ngood_function(x = 2, y = 1)\n\n[1] 2\n\n\nBruno Rodriguez has a book and a blog that explores this idea further."
  },
  {
    "objectID": "03_functions.html#debugging",
    "href": "03_functions.html#debugging",
    "title": "3  Advanced R Programming",
    "section": "3.4 Debugging",
    "text": "3.4 Debugging\nR code inside of custom functions can be tougher to troubleshoot than R code outside of custom functions. Fortunately, R has a powerful debugging tool.\nThe debugger requires putting custom functions in their own scripts. This is covered in Section 3.6.\nTo set up the debugger, simply select the red dot to the left of a line of code in a custom function and then source the custom function. After, there should be a red dot next to the defined function in the global environment.2\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n(b)\n\n\n\n\nFigure 3.1: Setting up the debugger\n\n\nNow, when the function is called it will stop at the red dot (the stop point). Importantly, the environment should reflect the environment inside of the function instead of the global environment.\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n(b)\n\n\n\n\nFigure 3.2: Using the debugger\n\n\nFinally, RStudio gives several controls for the debugger. There is a button to Continue to the end of the function. There is a button to Stop execution.\nThere is also a button with two brackets and a green arrow. This steps the debugger into another function. This is incredibly useful when functions are nested inside of functions.\n\n\n\n\n\n\n\nExercise 4\n\n\n\n\nCreate a custom function with at least three different pieces of R code.\nSave the function in a .R script with the same name as the function.\nClick the little red dot to the left of first line of code in the .R script.\nSource the function with the source button at the top right.\nCall the function. You should enter the debugger."
  },
  {
    "objectID": "03_functions.html#benchmarking",
    "href": "03_functions.html#benchmarking",
    "title": "3  Advanced R Programming",
    "section": "3.5 Benchmarking",
    "text": "3.5 Benchmarking\nBenchmarking is the process of estimating the run time of code. Oftentimes, benchmarking is used to compare multiple pieces of code to pick the more performant code. This raises a couple of issues:\n\nComputing environments differ. My MacBook Pro with Apple M1 chips typically outperforms my work computer.\nOther software can slow performance. When I open up Spotify my R processes typically slow down.\n\nWe can’t solve problem 1 with an R package, but we can solve problem 2 by running tests multiple times. library(microbenchmark) makes this very easy.\nSuppose we are interested in the median of a vector of 1 million numbers. We can easily calculate this with median() or quantile(). Suppose we are concerned about computation speed, so lets test the code performance:\n\nlibrary(microbenchmark)\n\nx &lt;- 1:1000000\n\nmicrobenchmark::microbenchmark(\n  median(x),\n  quantile(x, probs = 0.5)\n)\n\nWarning in microbenchmark::microbenchmark(median(x), quantile(x, probs = 0.5)):\nless accurate nanosecond times to avoid potential integer overflows\n\n\nUnit: milliseconds\n                     expr      min       lq     mean   median       uq\n                median(x) 6.070993 6.432121 7.112188 6.522526 7.078650\n quantile(x, probs = 0.5) 3.339819 3.671079 3.981583 3.720340 4.135034\n       max neval\n 40.700290   100\n  5.683256   100\n\n\n\n\n\n\n\n\nExercise 5\n\n\n\nLet’s compare %&gt;% and |&gt; to see if they have comparable computation times. Consider this example from Stack Overflow, which shows |&gt; is clearly better.\n\nLoad library(microbenchmark) and add the microbenchmark() function.\nCreate x1 &lt;- 1:1000000, x2 &lt;- 1:1000000, and x3 &lt;- 1:1000000\nTest median(x1), x2 |&gt; median(), and x3 %&gt;% median().3"
  },
  {
    "objectID": "03_functions.html#sec-organizing-an-analysis",
    "href": "03_functions.html#sec-organizing-an-analysis",
    "title": "3  Advanced R Programming",
    "section": "3.6 Organizing an Analysis",
    "text": "3.6 Organizing an Analysis\nWe recommend writing functions for data analysis. We need a plan for how to add custom functions to our workflow built on RStudio projects and Quarto.\nWe typically recommending adding a directory called R or src in a project directory and then sourcing scripts in to Quarto documents. Keeping functions in separate scripts makes the functions easier to use in multiple documents and simplifies the debugging process outlined above.\nWe typically only add one function to an R script in the R/ directory and name the script after the function (without parentheses). Next, we source function scripts at the top of Quarto documents after loading packages with the source(). library(here) is essential if when sourcing from a Quarto document that is in a subdirectory of the project."
  },
  {
    "objectID": "03_functions.html#packages",
    "href": "03_functions.html#packages",
    "title": "3  Advanced R Programming",
    "section": "3.7 Packages",
    "text": "3.7 Packages\nAt some point, the same scripts or data are used often enough or widely enough to justify moving from sourced R scripts to a full-blown R package. R packages make it easier to\n\nMake it easier to share and version code.\nImprove documentation of functions and data.\nMake it easier to test code.\nOften lead to fun hex stickers.\n\n\n3.7.1 Use This\nlibrary(usethis) includes an R package template. The following will add all necessary files for an R package to a directory called testpackage/ and open an RStudio package.\n\nlibrary(usethis)\ncreate_package(\"/Users/adam/testpackage\")\n\n\n\n3.7.2 Package contents\nThe template includes a lot of different files and directories. We will focus on the minimum sufficient set of files for building a package.\nDESCRIPTION contains the meta information about the package. Important lines include the package version and the license. Package versions are useful for tracking the version of the package used with an analysis. library(usethis) has a helper function for picking a license.\nPackage: testpackage\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"First\", \"Last\", , \"first.last@example.com\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"YOUR-ORCID-ID\"))\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\n\n\n3.7.3 Functions\nFunctions go in the R directory, just like when we sourced functions earlier. Be sure to reference packages directly with :: (e.g. stats::lm()).\n\nRoxygen\nIt is essential to use Roxygen skeletons with custom functions. RStudio makes this simple. Place the cursor in a function and select Code &gt; Insert Roxygen Skeleton. The Roxygen skeleton creates help documentation for a package, which can be accessed with ?.\n#' Title\n#'\n#' @param\n#'\n#' @return\n#' @export\n#'\n#' @examples\nThe title should be a brief description of the function. param describes each input to the function and return describes the output of the function.\n\n\nTests"
  },
  {
    "objectID": "03_functions.html#unit-testing",
    "href": "03_functions.html#unit-testing",
    "title": "3  Advanced R Programming",
    "section": "3.8 Unit testing",
    "text": "3.8 Unit testing\nUnit testing is the systematic testing of functions to ensure correctness."
  },
  {
    "objectID": "03_functions.html#test-coverage",
    "href": "03_functions.html#test-coverage",
    "title": "3  Advanced R Programming",
    "section": "3.9 Test coverage",
    "text": "3.9 Test coverage\nTest coverage is the scope and quality of tests performed on a code base."
  },
  {
    "objectID": "03_functions.html#references",
    "href": "03_functions.html#references",
    "title": "3  Advanced R Programming",
    "section": "3.10 References",
    "text": "3.10 References\n\n\n\n\nBarrientos, Andrés F., Aaron R. Williams, Joshua Snoke, and Claire McKay Bowen. 2021. “A Feasibility Study of Differentially Private Summary Statistics and Regression Analyses with Evaluations on Administrative and Survey Data.” https://doi.org/10.48550/ARXIV.2110.12055."
  },
  {
    "objectID": "03_functions.html#footnotes",
    "href": "03_functions.html#footnotes",
    "title": "3  Advanced R Programming",
    "section": "",
    "text": "This rule won’t exactly hold if the function contains random or stochastic code. In those cases, the function should return the same output every time if the seed is set with set.seed().↩︎\nAccording to Hadley Wickham, “You can think of an environment as a bag of names. Each name points to an object stored elsewhere in memory.” For more details, see the Environments chapter of Advanced R.↩︎\nDon’t be surprised when microbenchmark::microbenchmark() returns a row with expr median(x2) instead of x2 |&gt; median(). This is expected behavior because the base pipe is implemented as a syntax transformation. You can read more about this in this blog.↩︎"
  },
  {
    "objectID": "04_web-scraping.html#sec-review4",
    "href": "04_web-scraping.html#sec-review4",
    "title": "4  Web Scraping",
    "section": "4.1 Review",
    "text": "4.1 Review\nWe explored pulling data from web APIs in DSPP1. With web APIs, stewards are often carefully thinking about how to share information. This will not be the case with web scraping.\nWe also explored extracting data from Excel workbooks in Section 02. We will build on some of the ideas in that section.\nRecall that if we have a list of elements, we can extract the \\(i^{th}\\) element with [[]]. For example, we can extract the third data frame from a list of data frames called data with data[[3]].\nRecall that we can use map() to iterate a function across each element of a vector. Consider the following example:\n\ntimes2 &lt;- function(x) x * 2\n\nx &lt;- 1:3\n\nmap(.x = x, .f = times2)\n\n[[1]]\n[1] 2\n\n[[2]]\n[1] 4\n\n[[3]]\n[1] 6"
  },
  {
    "objectID": "04_web-scraping.html#introduction-and-motivation",
    "href": "04_web-scraping.html#introduction-and-motivation",
    "title": "4  Web Scraping",
    "section": "4.2 Introduction and Motivation",
    "text": "4.2 Introduction and Motivation\nThe Internet is an immense source of information for research. Sometimes we can easily download data of interest in an ideal format with the click of a download button or a single API call.\nBut it probably won’t be long until we need data that require many download button clicks. Or worse, we may want data from web pages that don’t have a download button at all.\nConsider a few examples.\n\nThe Urban Institute’s Boosting Upward Mobility from Poverty project programmatically downloaded 51 .xslx workbooks when building the Upward Mobility Data Tables.\nWe worked with the text of executive orders going back to the Clinton Administration when learning text analysis in DSPP1. Unfortunately, the Federal Register doesn’t publish a massive file of executive orders. So we iterated through websites for each executive order, scraped the text, and cleaned the data.\nThe Urban Institute scraped course descriptions from Florida community colleges to understand opportunities for work-based learning.\nThe Billion Prices Project web scraped millions of prices each day from online retailers. The project used the data to construct real-time price indices that limited political interference and to research concepts like price stickiness.\n\nWe will explore two approaches for gathering information from the web.\n\nIteratively downloading files: Sometimes websites contain useful information across many files that need to be separately downloaded. We will use code to download these files. Ultimately, these files can be combined into one larger data set for research.\nScraping content from the body of websites: Sometimes useful information is stored as tables or lists in the body of websites. We will use code to scrape this information and then parse and clean the result.\n\nSometimes we download many PDF files using the first approach. A related method that we will not cover that is useful for gathering information from the web is extracting text data from PDFs."
  },
  {
    "objectID": "04_web-scraping.html#legal-and-ethical-considerations",
    "href": "04_web-scraping.html#legal-and-ethical-considerations",
    "title": "4  Web Scraping",
    "section": "4.3 Legal and Ethical Considerations",
    "text": "4.3 Legal and Ethical Considerations\nIt is important to consider the legal and ethical implications of any data collection. Collecting data from the web through methods like web scraping raises serious ethical and legal considerations.\n\n4.3.1 Legal1\nDifferent countries have different laws that affect web scraping. The United States has different laws and legal interpretations than countries in Europe, which are largely regulated by the European Union. In general, the United States has more relaxed policies than the European when it comes to gathering data from the web.\nR for Data Science (2e) contains a clear and approachable rundown of legal consideration for gathering information for the web. We adopt their three-part standard of “public, non-personal, and factual”, which relate to terms of service, personally identifiable information, and copyright.\nWe will focus solely on laws in the United States.\n\nTerms of Service\nThe legal environment for web scraping is in flux, but US Courts have created an environment that is legally supportive of gathering public information from the web.\nFirst, we need to understand how many websites bar web scraping. Second, we need to understand when we can ignore these rules.\n\n\n\n\n\n\nTerms of Service\n\n\n\nA terms of service is a list of rules posted by the provider of a website, web service, or software.\n\n\nTerms of Service for many websites bar web scraping.\nFor example, LinkedIn’s Terms of Service says users agree to not “Develop, support or use software, devices, scripts, robots or any other means or processes (including crawlers, browser plugins and add-ons or any other technology) to scrape the Services or otherwise copy profiles and other data from the Services;”\nThis sounds like the end of web scraping, but as Wickham, Çetinkaya-Rundel, and Grolemund (2023) note, Terms of Service end up being a “legal land grab” for companies. It isn’t clear how LinkedIn would legally enforce this. HiQ Labs v. LinkedIn from the United States Court of Appeals for the Ninth Circuit bars Computer Fraud and Abuse Act (CFAA) claims against web scraping public information.2\nWe follow a simple guideline: it is acceptable to scrape information when we don’t need to create an account.\n\n\n\n4.3.2 PII\n\n\n\n\n\n\nPersonal Identifiable Information\n\n\n\nPersonal Identifiable Information (PII) is any information that can be used to directly identify an individual.\n\n\nPublic information on the Internet often contains PII, which raises legal and ethical challenges. We will discuss the ethics of PII later.\nThe legal considerations are trans-Atlantic. The General Data Protection Regulation (GDPR) is a European Union regulation about information privacy. It contains strict rules about the collection and storage of PII. It applies to almost everyone collecting data inside the EU. The GDPR is also extraterritorial, which means its rules can apply outside of the EU under certain circumstances like when an American company gathers information about EU individuals.\nWe will avoid gathering PII, so we don’t need to consider PII.\n\nCopyright\n\n\n\n\n\n\nCopyright Law\n\n\n\n\nCopyright protection subsists, in accordance with this title, in original works of authorship fixed in any tangible medium of expression, now known or later developed, from which they can be perceived, reproduced, or otherwise communicated, either directly or with the aid of a machine or device. Works of authorship include the following categories:\n\n\nliterary works;\n\n\nmusical works, including any accompanying words;\n\n\ndramatic works, including any accompanying music;\n\n\npantomimes and choreographic works;\n\n\npictorial, graphic, and sculptural works;\n\n\nmotion pictures and other audiovisual works;\n\n\nsound recordings; and\n\n\narchitectural works.\n\n\nIn no case does copyright protection for an original work of authorship extend to any idea, procedure, process, system, method of operation, concept, principle, or discovery, regardless of the form in which it is described, explained, illustrated, or embodied in such work.\n\n17 U.S.C.\n\n\nOur final legal concern for gathering information from the Internet is copyright law. We have two main options for avoiding copyright limitations.\n\nWe can avoid copyright protections by not scraping authored content in the protected categories (i.e. literary works and sound recordings). Fortunately, factual data are not typically protected by copyright.\nWe can scrape information that is fair use. This is important if we want to use images, films, music, or extended text as data.\n\nWe will focus on data that are not copyrighted.\n\n\n\n4.3.3 Ethical\nWe now turn to ethical considerations and some of the best-practices for gathering information from the web. In general, we will aim to be polite, give credit, and respect individual information.\n\nBe polite\nIt is expensive and time-consuming to host data on the web. Hosts experience a small burden every time we access a website. This burden is small but can quickly grow with repeated queries. Just like with web APIs, we want to pace the burden of our access to be polite.\n\n\n\n\n\n\nRate Limiting\n\n\n\nRate limiting is the intentional slowing of web traffic for a user or users.\n\n\nWe will use Sys.sleep() in custom functions to slow our web scraping and ease the burden of our web scraping on web hosts.\n\n\n\n\n\n\nrobots.txt\n\n\n\nrobots.txt tells web crawlers and scrapers which URLs the crawler is allowed to access on a website.\n\n\nMany websites contain a robots.txt file. Consider examples from the Urban Institute and White House.\nWe can manually look at the robots.txt. For example, just visit https://www.urban.org/robots.txt or https://www.whitehouse.gov/robots.txt. We can also use library(polite), which will automatically look at the robots.txt.\n\n\nGive Credit\nAcademia and the research profession undervalue the collection and curation of data. Generally speaking, no one gets tenure for constructing even the most important data sets. It is important to give credit for data accessed from the web. Ideally, add the citation to Zotero and then easily add it to your manuscript in Quarto.\nBe sure to make it easy for others to cite data sets that you create. Include an example citation like IPUMS or create a DOI for your data.\nThe rise of generative AI models like GPT-3, Stable Diffusion, DALL-E 2 makes urgent considerations of giving credit. These models consume massive amounts of training data, and it isn’t clear where the training data come from or the legal and ethical implications of the training data.3\nConsider a few current events:\n\nSarah Silverman is suing OpenAI because she “never gave permission for OpenAI to ingest the digital version of her 2010 book to train its AI models, and it was likely stolen from a ‘shadow library’ of pirated works.”\nSomepalli et al. (2023) use state-of-the-art image retrieval models to find that generative AI models like the popular the popular Stable Diffusion model “blatantly copy from their training data.” This is a major problem if the training data are copyrighted. The first page of their paper (here) contains some dramatic examples.\nFinally, this Harvard Business Review article discusses the intellectual property problem facing generative AI.\n\n\n\nRespect Individual Information\nData science methods should adhere to the same ethical standards as any research method. The social sciences have ethical norms about protecting privacy (discussed later) and informed consent.\n\n\n\n\n\n\nDiscussion\n\n\n\nIs it appropriate to collect and share public PII?\nDo these norms apply to data that is already public on the Internet?\n\n\nLet’s consider an example. In 2016, researchers posted data about 70,000 OkCupid accounts. The data didn’t contain names but did contain usernames. The data also contained many sensitive variables including topics like sexual habits and politics.\nThe release drew strong reactions from some research ethicists including Michael Zimmer and Os Keyes.4\nFellegi (1972) defines data privacy as the ability “to determine what information about ourselves we will share with others”. Maybe OkCupid users made the decision to forego confidentiality when they published their accounts. Many institutional ethics committees do not require informed consent for public data.\nRavn, Barnwell, and Barbosa Neves (2020) do a good job developing a conceptual framework that bridges the gap between the view that all public data require informed consent and the view that no public data require informed consent.\nIt’s possible to conceive of a web scraping research project that is purely observational that adheres to the ethical standards of research and contains potentially disclosive information about individuals. Fortunately, researchers can typically use Institutional Review Boards and research ethicists to navigate these questions.\nAs a basic standard, we will avoid collecting PII and use anonymization techniques to limit the risk of re-identification.\nWe will also focus on applications where the host of information crudely shares the information. There are ample opportunities to create value by gathering information from government sources and converting it into more useful formats. For example, the government too often shares information in .xls and .xlsx files, clunky web interfaces, and PDFs."
  },
  {
    "objectID": "04_web-scraping.html#programatically-downloading-data",
    "href": "04_web-scraping.html#programatically-downloading-data",
    "title": "4  Web Scraping",
    "section": "4.4 Programatically Downloading Data",
    "text": "4.4 Programatically Downloading Data\nThe County Health Rankings & Roadmaps is a source of state and local information.\nSuppose we are interested in Injury Deaths at the state level. We can click through the interface and download a .xlsx file for each state.\n\n4.4.1 Downloading a Single File\n\nStart here.\nUsing the interface at the bottom of the page, we can navigate to the page for “Virginia.”\nNext, we can click “View State Data.”\nNext, we can click “Download Virginia data sets.”\n\nThat’s a lot of clicks to get here.\nIf we want to download “2023 Virginia Data”, we can typically right click on the link and select “Copy Link Address”. This should return one of the following two URLS:\nhttps://www.countyhealthrankings.org/sites/default/files/media/document/2023%20County%20Health%20Rankings%20Virginia%20Data%20-%20v2.xlsx\nhttps://www.countyhealthrankings.org/sites/default/files/media/document/2023 County Health Rankings Virginia Data - v2.xlsx\nSpaces are special characters in URLs and they are sometimes encoded as %20. Both URLs above work in the web browser, but only the URL with %20 will work with code.\nAs we’ve seen several times before, we could use read_csv() to directly download the data from the Internet if the file was a .csv.5 We need to download this file because it is an Excel file, which we can do with download.file() provided we include a destfile.\n\ndownload.file(\n  url = \"https://www.countyhealthrankings.org/sites/default/files/media/document/2023%20County%20Health%20Rankings%20Virginia%20Data%20-%20v2.xlsx\", \n  destfile = \"data/virginia-injury-deaths.xlsx\"\n)\n\n\n\n4.4.2 Downloading Multiple Files\nIf we click through and find the links for several states, we see that all of the download links follow a common pattern. For example, the URL for Vermont is\nhttps://www.countyhealthrankings.org/sites/default/files/media/document/2023 County Health Rankings Vermont Data - v2.xlsx\nThe URLs only differ by \"Virginia\" and \"Vermont\". If we can create a vector of URLs by changing state name, then it is simple to iterate downloading the data. We will only download data for two states, but we can imagine downloading data for many states or many counties. Here are three R tips:\n\npaste0() and str_glue() from library(stringr) are useful for creating URLs and destination files.\nwalk() from library(purrr) can iterate functions. It’s like map(), but we use it when we are interested in the side-effect of a function.6\nSometimes data are messy and we want to be polite. Custom functions can help with rate limiting and cleaning data.\n\n\ndownload_chr &lt;- function(url, destfile) {\n\n  download.file(url = url, destfile = destfile)\n\n  Sys.sleep(0.5)\n\n}\n\nstates &lt;- c(\"Virginia\", \"Vermont\")\n\nurls &lt;- paste0(\n  \"https://www.countyhealthrankings.org/sites/default/files/\",\n  \"media/document/2023%20County%20Health%20Rankings%20\",\n  states,\n  \"%20Data%20-%20v2.xlsx\"\n)\n\noutput_files &lt;- paste0(\"data/\", states, \".xlsx\")\n\nwalk2(.x = urls, .y = output_files, .f = download_chr)\n\n\n\n\n\n\n\nExercise 1\n\n\n\nSOI Tax Stats - Historic Table 2 provides individual income and tax data, by state and size of adjusted gross income. The website contains a bulleted list of URLs and each URL downloads a .xlsx file.\n\nUse download.file() to download the file for Alabama.\nExplore the URLs using “Copy Link Address”.\nIterate pulling the data for Alabama, Alaska, and Arizona."
  },
  {
    "objectID": "04_web-scraping.html#web-scraping-with-rvest",
    "href": "04_web-scraping.html#web-scraping-with-rvest",
    "title": "4  Web Scraping",
    "section": "4.5 Web Scraping with rvest",
    "text": "4.5 Web Scraping with rvest\nWe now pivot to situations where useful information is stored in the body of web pages.\n\n4.5.1 Web Design\nIt’s simple to build a website with Quarto because it abstracts away most of web development. For example, Markdown is just a shortcut to write HTML. Web scraping requires us to learn more about web development than when we use Quarto.\nThe user interface of websites can be built with just HTML, but most websites contain HTML, CSS, and JavaScript. The development the interface of websites with HTML, CSS, and JavaScript is called front-end web development.\n\n\n\n\n\n\nHyper Text Markup Language\n\n\n\nHyper Text Markup Language (HTML) is the standard language for creating web content. HTML is a markup language, which means it has code for creating structure and and formatting.\n\n\nThe following HTML generates a bulleted list of names.\n&lt;ul&gt;\n  &lt;li&gt;Alex&lt;/li&gt;\n  &lt;li&gt;Aaron&lt;/li&gt;\n  &lt;li&gt;Alena&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\n\n\n\nCascading Style Sheets\n\n\n\nCascading Style Sheets (CSS) describes hot HTML elements should be styled when they are displayed.\n\n\nFor example, the following CSS adds extra space after sections with ## in our class notes.\n.level2 {\n  margin-bottom: 80px;\n}\n\n\n\n\n\n\nJavaScript\n\n\n\nJavaScript is a programming language that runs in web browsers and is used to build interactivity in web interfaces.\n\n\nQuarto comes with default CSS and JavaScript. library(leaflet) and Shiny are popular tools for building JavaScript applications with R. We will focus on web scraping using HTML and CSS.\nFirst, we will cover a few important HTML concepts. W3Schools offers a thorough introduction. Consider the following simple website built from HTML:\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Hello World!&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1 class='important'&gt;Bigger Title!&lt;/h1&gt;\n&lt;h2 class='important'&gt;Big Title!&lt;/h1&gt;\n&lt;p&gt;My first paragraph.&lt;/p&gt;\n&lt;p id='special-paragraph'&gt;My first paragraph.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nAn HTML element is a start tag, some content, and an end tag. Every start tag has a matching end tag. For example, &lt;body and &lt;/body&gt;. &lt;html&gt;, &lt;head&gt;, and &lt;body&gt; are required elements for all web pages. Other HTML elements include &lt;h1&gt;, &lt;h2&gt;, and &lt;p&gt;.\nHTML attributes are name/value pairs that provide additional information about elements. HTML attributes are optional and are like function arguments for HTML elements.\nTwo HTML attributes, classes and ids, are particularly important for web scraping.\n\nHTML classes are HTML attributes that label multiple HTML elements. These classes are useful for styling HTML elements using CSS. Multiple elements can have the same class.\nHTML ids are HTML attributes that label one HTML element. Ids are useful for styling singular HTML elements using CSS. Each ID can be used only one time in an HTML document.\n\nWe can view HTML for any website by right clicking in our web browser and selecting “View Page Source.”7\n\n\n\n\n\n\nExercise 2\n\n\n\n\nInspect the HTML behind this list of “Hello World examples”.\nInspect the HTML behind the Wikipedia page for Jerzy Neyman.\n\n\n\nSecond, we will explore CSS. CSS relies on HTML elements, HTML classes, and HTML ids to style HTML content. CSS selectors can directly reference HTML elements. For example, the following selectors change the style of paragraphs and titles.\np {\n  color: red;\n}\n\nh1 {\n  font-family: wingdings;\n}\nCSS selectors can reference HTML classes. For example, the following selector changes the style of HTML elements with class='important'.\n.important {\n  font-family: wingdings;\n}\nCSS selectors can reference also reference HTML IDs. For example, the following selector changes the style of the one element with id='special-paragraph'\n#special-paragraph {\n  color: pink;\n}\nWe can explore CSS by right clicking and selecting Inspect. Most modern websites have a lot of HTML and a lot of CSS. We can find the CSS for specific elements in a website with the button at the top left of the new window that just appeared.\n\n\n\nInspecting CSS\n\n\n\n\n4.5.2 Tables\nlibrary(rvest) is the main tool for scraping static websites with R. We’ll start with examples that contain information in HTML tables.8\nHTML tables store information in tables in websites using the &lt;table&gt;, &lt;tr&gt;, &lt;th&gt;, and &lt;td&gt;. If the data of interest are stored in tables, then it can be trivial to scrape the information.\nConsider the Wikipedia page for the 2012 Presidential Election. We can scrape all 46 tables from the page with two lines of code. We use the WayBack Machine to ensure the content is stable.\n\nlibrary(rvest)\n\n\nAttaching package: 'rvest'\n\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\ntables &lt;- read_html(\"https://web.archive.org/web/20230814004444/https://en.wikipedia.org/wiki/2012_United_States_presidential_election\") |&gt;\n  html_table()\n\nSuppose we are interested in the table about presidential debates. We can extract that element from the list of tables.\n\ntables[[18]]\n\n# A tibble: 12 × 9\n   `Presidential candidate`     Party `Home state` `Popular vote` `Popular vote`\n   &lt;chr&gt;                        &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;          &lt;chr&gt;         \n 1 \"Presidential candidate\"     Party Home state   Count          Percentage    \n 2 \"Barack Hussein Obama II\"    Demo… Illinois     65,915,795     51.06%        \n 3 \"Willard Mitt Romney\"        Repu… Massachuset… 60,933,504     47.20%        \n 4 \"Gary Earl Johnson\"          Libe… New Mexico   1,275,971      0.99%         \n 5 \"Jill Ellen Stein\"           Green Massachuset… 469,627        0.36%         \n 6 \"Virgil Hamlin Goode Jr.\"    Cons… Virginia     122,389        0.11%         \n 7 \"Roseanne Cherrie Barr\"      Peac… Utah         67,326         0.05%         \n 8 \"Ross Carl \\\"Rocky\\\" Anders… Just… Utah         43,018         0.03%         \n 9 \"Thomas Conrad Hoefling\"     Amer… Nebraska     40,628         0.03%         \n10 \"Other\"                      Other Other        217,152        0.17%         \n11 \"Total\"                      Total Total        129,085,410    100%          \n12 \"Needed to win\"              Need… Needed to w… Needed to win  Needed to win \n# ℹ 4 more variables: Electoralvote &lt;chr&gt;, `Running mate` &lt;chr&gt;,\n#   `Running mate` &lt;chr&gt;, `Running mate` &lt;chr&gt;\n\n\nOf course, we want to be polite. library(polite) makes this very simple. “The three pillars of a polite session are seeking permission, taking slowly and never asking twice.”\nWe’ll use bow() to start a session and declare our user agent, and scrape() instead of read_html().9\n\nlibrary(polite)\n\nsession &lt;- bow(\n  url = \"https://web.archive.org/web/20230814004444/https://en.wikipedia.org/wiki/2012_United_States_presidential_election\",\n  user_agent = \"Georgetown students learning scraping -- arw109@georgetown.edu\"\n)\n\nsession\n\n&lt;polite session&gt; https://web.archive.org/web/20230814004444/https://en.wikipedia.org/wiki/2012_United_States_presidential_election\n    User-agent: Georgetown students learning scraping -- arw109@georgetown.edu\n    robots.txt: 1 rules are defined for 1 bots\n   Crawl delay: 5 sec\n  The path is scrapable for this user-agent\n\nelection_page &lt;- session |&gt;\n  scrape() \n  \ntables &lt;- election_page |&gt;\n  html_table()\n\ntables[[18]]\n\n# A tibble: 12 × 9\n   `Presidential candidate`     Party `Home state` `Popular vote` `Popular vote`\n   &lt;chr&gt;                        &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;          &lt;chr&gt;         \n 1 \"Presidential candidate\"     Party Home state   Count          Percentage    \n 2 \"Barack Hussein Obama II\"    Demo… Illinois     65,915,795     51.06%        \n 3 \"Willard Mitt Romney\"        Repu… Massachuset… 60,933,504     47.20%        \n 4 \"Gary Earl Johnson\"          Libe… New Mexico   1,275,971      0.99%         \n 5 \"Jill Ellen Stein\"           Green Massachuset… 469,627        0.36%         \n 6 \"Virgil Hamlin Goode Jr.\"    Cons… Virginia     122,389        0.11%         \n 7 \"Roseanne Cherrie Barr\"      Peac… Utah         67,326         0.05%         \n 8 \"Ross Carl \\\"Rocky\\\" Anders… Just… Utah         43,018         0.03%         \n 9 \"Thomas Conrad Hoefling\"     Amer… Nebraska     40,628         0.03%         \n10 \"Other\"                      Other Other        217,152        0.17%         \n11 \"Total\"                      Total Total        129,085,410    100%          \n12 \"Needed to win\"              Need… Needed to w… Needed to win  Needed to win \n# ℹ 4 more variables: Electoralvote &lt;chr&gt;, `Running mate` &lt;chr&gt;,\n#   `Running mate` &lt;chr&gt;, `Running mate` &lt;chr&gt;\n\n\n\n\n\n\n\n\nExercise 3\n\n\n\n\nInstall and load library(rvest).\nInstall and load library(polite).\nScrape the Presidential debates table from the Wikipedia article for the 2008 presidential election.\n\n\n\n\n\n4.5.3 Other HTML Content\nSuppose we want to scrape every URL in the body of the 2012 Presidential Election webpage. html_table() no longer works.\nWe could manually poke through the source code to find the appropriate CSS selectors. Fortunately, SelectorGadget often eliminates this tedious work by telling you the name of the html elements that you click on.\n\nClick the SelectorGadget gadget browser extension. You may need to click the puzzle piece to the right of the address bar and then click the SelectorGadget browser extension.\nSelect an element you want to scrape. The elements associated with the CSS selector provided at the bottom will be in green and yellow.\n\nIf SelectorGadget selects too few elements, select additional elements. If SelectorGadget selects too many elements, click those elements. They should turn red.\n\nEach click should refine the CSS selector.\nAfter a few clicks, it’s clear we want p a. This should select any element a in p. a is the element for URLs.\nWe’ll need a few more functions to finish this example.\n\nhtml_elements() filters the output of read_html()/scrape() based on the provided CSS selector. html_elements() can return multiple elements while html_element() always returns one element.\nhtml_text2() retrieves text from HTML elements.\nhtml_attrs() retrieves HTML attributes from HTML elements. html_attrs() can return multiple attributes while html_attr() always returns one attribute.\n\n\ntibble(\n  text = election_page |&gt;\n    html_elements(css = \"p a\") |&gt;\n    html_text2(),\n  url = election_page |&gt;\n    html_elements(css = \"p a\") |&gt;\n    html_attr(name = \"href\")\n)\n\n# A tibble: 355 × 2\n   text                  url                                                    \n   &lt;chr&gt;                 &lt;chr&gt;                                                  \n 1 Barack Obama          /web/20230814004444/https://en.wikipedia.org/wiki/Bara…\n 2 Democratic            /web/20230814004444/https://en.wikipedia.org/wiki/Demo…\n 3 Barack Obama          /web/20230814004444/https://en.wikipedia.org/wiki/Bara…\n 4 Democratic            /web/20230814004444/https://en.wikipedia.org/wiki/Demo…\n 5 presidential election /web/20230814004444/https://en.wikipedia.org/wiki/Unit…\n 6 Democratic            /web/20230814004444/https://en.wikipedia.org/wiki/Demo…\n 7 President             /web/20230814004444/https://en.wikipedia.org/wiki/Pres…\n 8 Barack Obama          /web/20230814004444/https://en.wikipedia.org/wiki/Bara…\n 9 running mate          /web/20230814004444/https://en.wikipedia.org/wiki/Runn…\n10 Vice President        /web/20230814004444/https://en.wikipedia.org/wiki/Vice…\n# ℹ 345 more rows\n\n\n\n\n\n\n\n\nExercise 4\n\n\n\nSuppose we are interested in examples of early websites. Wikipedia has a list of URLs from before 1995.\n\nAdd the SelectorGadget web extension to your browser.\nUse library(polite) and library(rvest) to scrape() the following URL.\n\nhttps://web.archive.org/web/20230702163608/https://en.wikipedia.org/wiki/List_of_websites_founded_before_1995\n\nWe are interested in scraping the names of early websites and their URLs. Use SelectorGadget to determine the CSS selectors associated with these HTML elements.\nCreate a tibble with a variable called name and a variable called url.\nRemove duplicate rows with distinct() or filter().\n\n\n\n\n\n\n\n\n\nExercise 5\n\n\n\n\nFind your own HTML table of interest to scrape.\nUse library(rvest) and library(polite) to scrape the table.\n\n\n\n\n\n\n\nFellegi, I. P. 1972. “On the Question of Statistical Confidentiality.” Journal of the American Statistical Association 67 (337): 7–18. https://www.jstor.org/stable/2284695?seq=1#metadata_info_tab_contents.\n\n\nRavn, Signe, Ashley Barnwell, and Barbara Barbosa Neves. 2020. “What Is “Publicly Available Data”? Exploring Blurred PublicPrivate Boundaries and Ethical Practices Through a Case Study on Instagram.” Journal of Empirical Research on Human Research Ethics 15 (1-2): 40–45. https://doi.org/10.1177/1556264619850736.\n\n\nSomepalli, Gowthami, Singla, Micah Goldblum, Jonas Geiping, and Tom Goldstein. 2023. “Diffusion Art or Digital Forgery? Investigating Data Replication in Diffusion Models.” Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), 6048–58. https://openaccess.thecvf.com/content/CVPR2023/html/Somepalli_Diffusion_Art_or_Digital_Forgery_Investigating_Data_Replication_in_Diffusion_CVPR_2023_paper.html.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science: Import, Tidy, Transform, Visualie, and Model Data. 2nd edition. Sebastopol, CA: O’Reilly."
  },
  {
    "objectID": "04_web-scraping.html#footnotes",
    "href": "04_web-scraping.html#footnotes",
    "title": "4  Web Scraping",
    "section": "",
    "text": "We are not lawyers. This is not official legal advise. If in-doubt, please contact a legal professional.↩︎\nThis blog and this blog support this statement. Again, we are not lawyers and the HiQ Labs v. LinkedIn decision is complicated because of its long history and conclusion in settlement.↩︎\nThe scale of crawling is so great that there is concern about models converging once all models use the same massive training data. Common Crawl is one example. This isn’t a major issue for generating images but model homogeneity is a big concern in finance.↩︎\nWho deserves privacy is underdiscussed and inconsistent. Every year, newspapers across the country FOIA information about government employees and publish their full names, job titles, and salaries.↩︎\nConsequently, code that may once have worked can break, but using read_csv(&lt;file_path&gt;) to access data once it has been downloaded will work consistently.↩︎\nThe only difference between map() and walk() is their outputs. map() returns the results of a function in a list. walk() returns nothing when used without assignment, and we never use walk() with assignment. walk() is useful when we don’t care about the output of functions and are only interested in their “side-effects”. Common functions to use with walk() are ggsave() and write_csv(). For more information on walk(), see Advanced R.↩︎\nWe recommend using Google Chrome, which has excellent web development tools.↩︎\nIf a website is static, that means that the website is not interactive and will remain the same unless the administrator actively makes changes. Hello World examples is an example of a static website.↩︎\nThe polite documentation describes the bow() function as being used to “introduce the client to the host and ask for permission to scrape (by inquiring against the host’s robots.txt file).”↩︎"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Barrientos, Andrés F., Aaron R. Williams, Joshua Snoke, and Claire McKay\nBowen. 2021. “A Feasibility Study of Differentially Private\nSummary Statistics and Regression Analyses with Evaluations on\nAdministrative and Survey Data.” https://doi.org/10.48550/ARXIV.2110.12055.\n\n\nFellegi, I. P. 1972. “On the Question of Statistical\nConfidentiality.” Journal of the American Statistical\nAssociation 67 (337): 7–18. https://www.jstor.org/stable/2284695?seq=1#metadata_info_tab_contents.\n\n\nRavn, Signe, Ashley Barnwell, and Barbara Barbosa Neves. 2020.\n“What Is “Publicly Available Data”?\nExploring Blurred PublicPrivate Boundaries and Ethical\nPractices Through a Case Study on Instagram.” Journal of\nEmpirical Research on Human Research Ethics 15 (1-2): 40–45. https://doi.org/10.1177/1556264619850736.\n\n\nSomepalli, Gowthami, Singla, Micah Goldblum, Jonas Geiping, and Tom\nGoldstein. 2023. “Diffusion Art or Digital Forgery? Investigating\nData Replication in Diffusion Models.” Proceedings of the\nIEEE/CVF Conference on Computer Vision and Pattern Recognition\n(CVPR), 6048–58. https://openaccess.thecvf.com/content/CVPR2023/html/Somepalli_Diffusion_Art_or_Digital_Forgery_Investigating_Data_Replication_in_Diffusion_CVPR_2023_paper.html.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023.\nR for Data Science: Import, Tidy, Transform, Visualie, and Model\nData. 2nd edition. Sebastopol, CA: O’Reilly."
  }
]